{"index": {"_index": "r1.7", "_id": "mindspore_ascend310_install_binary.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_binary.md", "text_entry": "['# 二进制包方式安装MindSpore Ascend 310版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [二进制包方式安装MindSpore Ascend 310版本](#二进制包方式安装mindspore-ascend-310版本)\\n', '    - [安装MindSpore与依赖软件](#安装mindspore与依赖软件)\\n', '        - [安装Python](#安装python)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装gmp](#安装gmp)\\n', '        - [安装CMake](#安装cmake)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在Ascend 310环境的Linux系统上，使用二进制包方式快速安装MindSpore，Ascend 310版本仅支持推理。\\n', '\\n', '## 安装MindSpore与依赖软件\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8|-|编译和运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[CMake](#安装cmake)|3.18.3及以上|编译构建MindSpore的工具|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过Conda进行安装。\\n', '\\n', '安装Miniconda：\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '```bash\\n', 'conda create -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '如果您的环境为ARM架构，请确认当前使用的Python配套的pip版本>=19.3。使用以下命令升级pip。\\n', '\\n', '```bash\\n', 'python -m pip install -U pip\\n', '```\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布。如果之前安装过昇腾AI处理器配套软件包，需要先使用如下命令卸载相应的包。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '默认安装路径使用以下指令安装。如果安装路径不是默认路径，需要将命令中的路径替换为安装路径。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装gmp\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install libgmp-dev -y\\n', '    ```\\n', '\\n', '- CentOS 7和EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gmp-devel -y\\n', '    ```\\n', '\\n', '### 安装CMake\\n', '\\n', '- Ubuntu 18.04可以通过以下命令安装[CMake](https://cmake.org/)。\\n', '\\n', '    ```bash\\n', '    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\\n', '    sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\\n', '    sudo apt-get install cmake -y\\n', '    ```\\n', '\\n', '- 其他Linux系统可以使用以下命令安装。\\n', '\\n', '    根据系统架构选择不同的下载链接。\\n', '\\n', '    ```bash\\n', '    # x86使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.sh\\n', '    # aarch64使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-aarch64.sh\\n', '    ```\\n', '\\n', '    执行安装脚本安装CMake，默认安装到`/usr/local`目录下。\\n', '\\n', '    ```bash\\n', '    sudo mkdir /usr/local/cmake-3.19.8\\n', '    sudo bash cmake-3.19.8-Linux-*.sh --prefix=/usr/local/cmake-3.19.8 --exclude-subdir\\n', '    ```\\n', '\\n', '    最后需要将CMake添加到`PATH`环境变量中。如果使用默认安装目录执行以下命令，其他安装目录需要做相应修改。\\n', '\\n', '    ```bash\\n', '    echo -e \"export PATH=/usr/local/cmake-3.19.8/bin:\\\\$PATH\" >> ~/.bashrc\\n', '    source ~/.bashrc\\n', '    ```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'export MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据系统架构及Python版本执行如下命令安装MindSpore。\\n', '\\n', '```bash\\n', '# x86_64\\n', 'wget https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/{arch}/mindspore_ascend-${MS_VERSION/-/}-linux_x86_64.tar.gz --no-check-certificate\\n', 'tar -zxf mindspore_ascend-${MS_VERSION/-/}-linux_x86_64.tar.gz\\n', '\\n', '# aarch64\\n', 'wget https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/{arch}/mindspore_ascend-${MS_VERSION/-/}-linux_aarch64.tar.gz --no-check-certificate\\n', 'tar -zxf mindspore_ascend-${MS_VERSION/-/}-linux_aarch64.tar.gz\\n', '```\\n', '\\n', '## 配置环境变量\\n', '\\n', '安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '创建目录放置样例代码工程，例如`/home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample`，代码可以从[官网示例下载](https://obs.dualstack.cn-north-4.myhuaweicloud.com/mindspore-website/sample_resources/ascend310_single_op_sample.zip)获取，这是一个`[1, 2, 3, 4]`与`[2, 3, 4, 5]`相加的简单样例，代码工程目录结构如下:\\n', '\\n', '```text\\n', '└─ascend310_single_op_sample\\n', '    ├── CMakeLists.txt                    // 编译脚本\\n', '    ├── README.md                         // 使用说明\\n', '    ├── main.cc                           // 主函数\\n', '    └── tensor_add.mindir                 // MindIR模型文件\\n', '```\\n', '\\n', '进入样例工程目录，按照实际情况修改路径路径：\\n', '\\n', '```bash\\n', 'cd /home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample\\n', '```\\n', '\\n', '参照`README.md`说明，构建工程，其中`{mindspore_path}`表示MindSpore二进制包所在位置的绝对路径，根据实际情况替换。\\n', '\\n', '```bash\\n', 'cmake . -DMINDSPORE_PATH={mindspore_path}\\n', 'make\\n', '```\\n', '\\n', '构建成功后，执行用例。\\n', '\\n', '```bash\\n', './tensor_add_sample\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '3\\n', '5\\n', '7\\n', '9\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend310_install_conda.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_conda.md", "text_entry": "['# Conda方式安装MindSpore Ascend 310版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Conda方式安装MindSpore Ascend 310版本](#conda方式安装mindspore-ascend-310版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装Conda](#安装conda)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装gmp](#安装gmp)\\n', '        - [创建并进入Conda虚拟环境](#创建并进入conda虚拟环境)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_conda.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Conda](https://docs.conda.io/en/latest/)是一个开源跨平台语言无关的包管理与环境管理系统，允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。\\n', '\\n', '本文档介绍如何在Ascend 310环境的Linux系统上，使用Conda方式快速安装MindSpore，Ascend 310版本仅支持推理。\\n', '\\n', '- 如果想在一个已经配置好昇腾AI处理器配套软件包的EulerOS 2.8上通过Conda安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-conda.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统是Ubuntu 18.04/CentOS 7.6，或者已经安装了部分依赖，如CUDA，Conda，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了昇腾AI处理器配套软件包。如果没有安装，请先参考[安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)小节进行安装。\\n', '\\n', '使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-conda.sh\\n', '# 默认安装Python 3.7以及最新版本的MindSpore\\n', '# 默认LOCAL_ASCEND路径为/usr/local/Ascend\\n', 'bash -i ./euleros-ascend-conda.sh\\n', '# 如需指定Python和MindSpore版本，以Python 3.9和MindSpore 1.6.0为例\\n', '# 且指定LOCAL_ASCEND路径为/home/xxx/Ascend，使用以下方式\\n', '# LOCAL_ASCEND=/home/xxx/Ascend PYTHON_VERSION=3.9 MINDSPORE_VERSION=1.6.0 bash -i ./euleros-ascend-conda.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 安装Conda并为MindSpore创建虚拟环境。\\n', '- 通过Conda安装MindSpore Ascend 310版本。\\n', '\\n', '在脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '要激活虚拟环境，以Python 3.7为例，执行以下命令。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '现在您可以跳转到[配置环境变量](#配置环境变量)小节设置相关环境变量。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8|-|编译和运行MindSpore的操作系统|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[Conda](#安装conda)|Anaconda3或Miniconda3|Python环境管理工具|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '### 安装Conda\\n', '\\n', '执行以下指令安装Miniconda。\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装gmp\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install libgmp-dev -y\\n', '    ```\\n', '\\n', '- CentOS 7和EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gmp-devel -y\\n', '    ```\\n', '\\n', '### 创建并进入Conda虚拟环境\\n', '\\n', '根据您希望使用的Python版本创建对应的Conda虚拟环境并进入虚拟环境。\\n', '\\n', '如果您希望使用Python3.7.5版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '如果希望使用其他版本Python，只需更改以上命令中的Python版本。当前支持Python 3.7，Python 3.8和Python 3.9。\\n', '\\n', '在虚拟环境中安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布，升级配套软件包之后需要重新安装。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '如果升级了昇腾AI处理器配套软件包，配套的whl包也需要重新安装，先将原来的安装包卸载，再参考上述命令重新安装。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '确认您处于Conda虚拟环境中，并执行如下命令安装最新版本的MindSpore。如需安装其他版本，可参考[版本列表](https://www.mindspore.cn/versions)在`mindspore-ascend=`后指定版本号。\\n', '\\n', '```bash\\n', 'conda install mindspore-ascend -c mindspore -c conda-forge\\n', '```\\n', '\\n', '在联网状态下，安装Conda安装包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 配置环境变量\\n', '\\n', '安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# lib libraries that the mindspore depends on, modify \"pip3\" according to the actual situation\\n', 'export LD_LIBRARY_PATH=`pip3 show mindspore-ascend | grep Location | awk \\'{print $2\"/mindspore/lib\"}\\' | xargs realpath`:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '创建目录放置样例代码工程，例如`/home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample`，代码可以从[官网示例下载](https://obs.dualstack.cn-north-4.myhuaweicloud.com/mindspore-website/sample_resources/ascend310_single_op_sample.zip)获取，这是一个`[1, 2, 3, 4]`与`[2, 3, 4, 5]`相加的简单样例，代码工程目录结构如下:\\n', '\\n', '```text\\n', '\\n', '└─ascend310_single_op_sample\\n', '    ├── CMakeLists.txt                    // 编译脚本\\n', '    ├── README.md                         // 使用说明\\n', '    ├── main.cc                           // 主函数\\n', '    └── tensor_add.mindir                 // MindIR模型文件\\n', '```\\n', '\\n', '进入样例工程目录，按照实际情况修改路径路径：\\n', '\\n', '```bash\\n', 'cd /home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample\\n', '```\\n', '\\n', '参照`README.md`说明，构建工程，其中`pip3`需要按照实际情况修改。\\n', '\\n', '```bash\\n', 'cmake . -DMINDSPORE_PATH=`pip3 show mindspore-ascend | grep Location | awk \\'{print $2\"/mindspore\"}\\' | xargs realpath`\\n', 'make\\n', '```\\n', '\\n', '构建成功后，执行用例。\\n', '\\n', '```bash\\n', './tensor_add_sample\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '3\\n', '5\\n', '7\\n', '9\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'conda update mindspore-ascend -c mindspore -c conda-forge\\n', '```\\n', '\\n', '注意：升级MindSpore Ascend版本conda安装包后请重新安装昇腾AI处理器配套软件包提供的whl包。首先卸载旧版本：\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '然后重新安装：\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend310_install_pip.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_pip.md", "text_entry": "['# pip方式安装MindSpore Ascend 310版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore Ascend 310版本](#pip方式安装mindspore-ascend-310版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装Python](#安装python)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装gmp](#安装gmp)\\n', '        - [安装CMake](#安装cmake)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在Ascend 310环境的Linux系统上，使用pip方式快速安装MindSpore，Ascend 310版本仅支持推理。\\n', '\\n', '- 如果您想在一个已经配置好昇腾AI处理器配套软件包的EulerOS 2.8上通过pip安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend310-pip.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统是Ubuntu 18.04/CentOS 7.6，或者已经安装了部分依赖，如Python，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了昇腾AI处理器配套软件包。如果没有安装，请先参考[安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)小节进行安装。\\n', '\\n', '使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend310-pip.sh\\n', '# 安装MindSpore 1.7.0和Python 3.7\\n', '# 默认LOCAL_ASCEND路径为/usr/local/Ascend\\n', 'MINDSPORE_VERSION=1.7.0 bash -i ./euleros-ascend310-pip.sh\\n', '# 如需指定Python和MindSpore版本，以Python 3.9和MindSpore 1.6.0为例\\n', '# 且指定LOCAL_ASCEND路径为/home/xxx/Ascend，使用以下方式\\n', '# LOCAL_ASCEND=/home/xxx/Ascend PYTHON_VERSION=3.9 PYTHON_VERSION=3.9 MINDSPORE_VERSION=1.6.0 bash -i ./euleros-ascend310-pip.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 通过APT安装Python3和pip3，并设为默认。\\n', '- 通过pip安装MindSpore Ascend 310版本。\\n', '\\n', '在脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '以Python 3.7为例，执行以下命令激活虚拟环境。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '现在您可以跳转到[配置环境变量](#配置环境变量)小节设置相关环境变量。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8|-|编译和运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[CMake](#安装cmake)|3.18.3及以上|编译构建MindSpore的工具|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过Conda进行安装。\\n', '\\n', '安装Miniconda：\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '```bash\\n', 'conda create -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '如果您的环境为ARM架构，请确认当前使用的Python配套的pip版本>=19.3。使用以下命令升级pip。\\n', '\\n', '```bash\\n', 'python -m pip install -U pip\\n', '```\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布。如果之前安装过昇腾AI处理器配套软件包，需要先使用如下命令卸载相应的包。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '默认安装路径使用以下指令安装。如果安装路径不是默认路径，需要将命令中的路径替换为安装路径。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装gmp\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install libgmp-dev -y\\n', '    ```\\n', '\\n', '- CentOS 7和EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gmp-devel -y\\n', '    ```\\n', '\\n', '### 安装CMake\\n', '\\n', '- Ubuntu 18.04可以通过以下命令安装[CMake](https://cmake.org/)。\\n', '\\n', '    ```bash\\n', '    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\\n', '    sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\\n', '    sudo apt-get install cmake -y\\n', '    ```\\n', '\\n', '- 其他Linux系统可以使用以下命令安装。\\n', '\\n', '    根据系统架构选择不同的下载链接。\\n', '\\n', '    ```bash\\n', '    # x86使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.sh\\n', '    # aarch64使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-aarch64.sh\\n', '    ```\\n', '\\n', '    执行安装脚本安装CMake，默认安装到`/usr/local`目录下。\\n', '\\n', '    ```bash\\n', '    sudo mkdir /usr/local/cmake-3.19.8\\n', '    sudo bash cmake-3.19.8-Linux-*.sh --prefix=/usr/local/cmake-3.19.8 --exclude-subdir\\n', '    ```\\n', '\\n', '    最后需要将CMake添加到`PATH`环境变量中。如果使用默认安装目录执行以下命令，其他安装目录需要做相应修改。\\n', '\\n', '    ```bash\\n', '    echo -e \"export PATH=/usr/local/cmake-3.19.8/bin:\\\\$PATH\" >> ~/.bashrc\\n', '    source ~/.bashrc\\n', '    ```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'export MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据系统架构及Python版本执行如下命令安装MindSpore。\\n', '\\n', '```bash\\n', '# x86_64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/x86_64/mindspore_ascend-${MS_VERSION/-/}-cp37-cp37m-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/x86_64/mindspore_ascend-${MS_VERSION/-/}-cp38-cp38-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/x86_64/mindspore_ascend-${MS_VERSION/-/}-cp39-cp39-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/aarch64/mindspore_ascend-${MS_VERSION/-/}-cp37-cp37m-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/aarch64/mindspore_ascend-${MS_VERSION/-/}-cp38-cp38-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/aarch64/mindspore_ascend-${MS_VERSION/-/}-cp39-cp39-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 配置环境变量\\n', '\\n', '安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# lib libraries that the mindspore depends on, modify \"pip3\" according to the actual situation\\n', 'export LD_LIBRARY_PATH=`pip3 show mindspore-ascend | grep Location | awk \\'{print $2\"/mindspore/lib\"}\\' | xargs realpath`:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '创建目录放置样例代码工程，例如`/home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample`，代码可以从[官网示例下载](https://obs.dualstack.cn-north-4.myhuaweicloud.com/mindspore-website/sample_resources/ascend310_single_op_sample.zip)获取，这是一个`[1, 2, 3, 4]`与`[2, 3, 4, 5]`相加的简单样例，代码工程目录结构如下:\\n', '\\n', '```text\\n', '\\n', '└─ascend310_single_op_sample\\n', '    ├── CMakeLists.txt                    // 编译脚本\\n', '    ├── README.md                         // 使用说明\\n', '    ├── main.cc                           // 主函数\\n', '    └── tensor_add.mindir                 // MindIR模型文件\\n', '```\\n', '\\n', '进入样例工程目录，按照实际情况修改路径路径：\\n', '\\n', '```bash\\n', 'cd /home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample\\n', '```\\n', '\\n', '参照`README.md`说明，构建工程，其中`pip3`需要按照实际情况修改。\\n', '\\n', '```bash\\n', 'cmake . -DMINDSPORE_PATH=`pip3 show mindspore-ascend | grep Location | awk \\'{print $2\"/mindspore\"}\\' | xargs realpath`\\n', 'make\\n', '```\\n', '\\n', '构建成功后，执行用例。\\n', '\\n', '```bash\\n', './tensor_add_sample\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '3\\n', '5\\n', '7\\n', '9\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend310_install_source.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_source.md", "text_entry": "['# 源码编译方式安装MindSpore Ascend 310版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [源码编译方式安装MindSpore Ascend 310版本](#源码编译方式安装mindspore-ascend-310版本)\\n', '    - [环境准备-自动 推荐](#环境准备-自动-推荐)\\n', '    - [环境准备-手动](#环境准备-手动)\\n', '        - [安装Python](#安装python)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装git gmp tclsh patch Flex](#安装git-gmp-tclsh-patch-flex)\\n', '        - [安装CMake](#安装cmake)\\n', '    - [从代码仓下载源码](#从代码仓下载源码)\\n', '    - [编译MindSpore](#编译mindspore)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend310_install_source.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在Ascend 310环境的Linux系统上，使用源码编译方式快速安装MindSpore，Ascend 310版本仅支持推理。\\n', '\\n', '- 如果您想在一个已经配置好昇腾AI处理器配套软件包的EulerOS 2.8上配置一个可以编译MindSpore的环境，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-source.sh)进行一键式配置，参见[环境准备-自动，推荐](#环境准备-自动推荐)小节。自动安装脚本会安装编译MindSpore所需的依赖。\\n', '\\n', '- 如果您的系统是Ubuntu 18.04/CentOS 7.6，或者已经安装了部分依赖，如Python，GCC等，则推荐参照[环境准备-手动](#环境准备-手动)小节的安装步骤手动安装。\\n', '\\n', '## 环境准备-自动 推荐\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了昇腾AI处理器配套软件包。如果没有安装，请先参考[安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)小节进行安装。\\n', '\\n', '使用以下命令获取自动安装脚本并执行。通过自动安装脚本配置的环境，仅支持编译MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-source.sh\\n', '# 默认安装Python 3.7\\n', '# 默认LOCAL_ASCEND路径为/usr/local/Ascend\\n', 'bash -i ./euleros-ascend-source.sh\\n', '# 如需指定安装Python 3.9，且指定LOCAL_ASCEND路径为/home/xxx/Ascend，使用以下方式\\n', '# LOCAL_ASCEND=/home/xxx/Ascend PYTHON_VERSION=3.9 PYTHON_VERSION=3.9 bash -i ./euleros-ascend-source.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 安装MindSpore所需的编译依赖，如GCC，CMake等。\\n', '- 安装Python3和pip3，并设为默认。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '以Python 3.7为例，执行以下命令激活虚拟环境。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '现在您可以跳转到[从代码仓下载源码](#从代码仓下载源码)小节开始下载编译MindSpore。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 环境准备-手动\\n', '\\n', '下表列出了编译安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8|-|编译和运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[git](#安装git-gmp-tclsh-patch-flex)|-|MindSpore使用的源代码管理工具|\\n', '|[CMake](#安装cmake)|3.18.3及以上|编译构建MindSpore的工具|\\n', '|[gmp](#安装git-gmp-tclsh-patch-flex)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Flex](#安装git-gmp-tclsh-patch-flex)|2.5.35及以上版本|MindSpore使用的词法分析器|\\n', '|[tclsh](#安装git-gmp-tclsh-patch-flex)|-|MindSpore sqlite编译依赖|\\n', '|[patch](#安装git-gmp-tclsh-patch-flex)|2.5及以上|MindSpore使用的源代码补丁工具|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过Conda进行安装。\\n', '\\n', '安装Miniconda：\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '```bash\\n', 'conda create -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布。如果之前安装过昇腾AI处理器配套软件包，需要先使用如下命令卸载相应的包。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '默认安装路径使用以下指令安装。如果安装路径不是默认路径，需要将命令中的路径替换为安装路径。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装git gmp tclsh patch Flex\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install git libgmp-dev tcl patch flex -y\\n', '    ```\\n', '\\n', '- CentOS 7和EulerOS可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install git gmp-devel tcl patch flex -y\\n', '    ```\\n', '\\n', '### 安装CMake\\n', '\\n', '- Ubuntu 18.04可以通过以下命令安装[CMake](https://cmake.org/)。\\n', '\\n', '    ```bash\\n', '    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\\n', '    sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\\n', '    sudo apt-get install cmake -y\\n', '    ```\\n', '\\n', '- 其他Linux系统可以使用以下命令安装。\\n', '\\n', '    根据系统架构选择不同的下载链接。\\n', '\\n', '    ```bash\\n', '    # x86使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.sh\\n', '    # aarch64使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-aarch64.sh\\n', '    ```\\n', '\\n', '    执行安装脚本安装CMake，默认安装到`/usr/local`目录下。\\n', '\\n', '    ```bash\\n', '    sudo mkdir /usr/local/cmake-3.19.8\\n', '    sudo bash cmake-3.19.8-Linux-*.sh --prefix=/usr/local/cmake-3.19.8 --exclude-subdir\\n', '    ```\\n', '\\n', '    最后需要将CMake添加到`PATH`环境变量中。如果使用默认安装目录执行以下命令，其他安装目录需要做相应修改。\\n', '\\n', '    ```bash\\n', '    echo -e \"export PATH=/usr/local/cmake-3.19.8/bin:\\\\$PATH\" >> ~/.bashrc\\n', '    source ~/.bashrc\\n', '    ```\\n', '\\n', '## 从代码仓下载源码\\n', '\\n', '```bash\\n', 'git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '## 编译MindSpore\\n', '\\n', '进入MindSpore根目录，然后执行编译脚本。\\n', '\\n', '```bash\\n', 'cd mindspore\\n', 'bash build.sh -e ascend -V 310 -S on\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `build.sh`中默认的编译线程数为8，如果编译机性能较差可能会出现编译错误，可在执行中增加-j{线程数}来减少线程数量。如`bash build.sh -e ascend -V 310 -j4`。\\n', '- 默认从github下载依赖源码，当-S选项设置为`on`时，从对应的gitee镜像下载。\\n', '- 关于`build.sh`更多用法请参看脚本头部的说明。\\n', '\\n', '## 安装MindSpore\\n', '\\n', '```bash\\n', 'tar -zxf output/mindspore_ascend-*.tar.gz\\n', '```\\n', '\\n', '## 配置环境变量\\n', '\\n', '安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '\\n', '# Set path to extracted MindSpore accordingly\\n', 'export LD_LIBRARY_PATH={mindspore_path}:${LD_LIBRARY_PATH}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `{mindspore_path}`表示MindSpore二进制包所在位置的绝对路径。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '创建目录放置样例代码工程，例如`/home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample`，代码可以从[官网示例下载](https://obs.dualstack.cn-north-4.myhuaweicloud.com/mindspore-website/sample_resources/ascend310_single_op_sample.zip)获取，这是一个`[1, 2, 3, 4]`与`[2, 3, 4, 5]`相加的简单样例，代码工程目录结构如下:\\n', '\\n', '```text\\n', '\\n', '└─ascend310_single_op_sample\\n', '    ├── CMakeLists.txt                    // 编译脚本\\n', '    ├── README.md                         // 使用说明\\n', '    ├── main.cc                           // 主函数\\n', '    └── tensor_add.mindir                 // MindIR模型文件\\n', '```\\n', '\\n', '进入样例工程目录，按照实际情况修改路径路径：\\n', '\\n', '```bash\\n', 'cd /home/HwHiAiUser/Ascend/ascend-toolkit/20.0.RC1/acllib_linux.arm64/sample/acl_execute_model/ascend310_single_op_sample\\n', '```\\n', '\\n', '参照`README.md`说明，构建工程，其中`{mindspore_path}`表示MindSpore二进制包所在位置的绝对路径，根据实际情况替换。\\n', '\\n', '```bash\\n', 'cmake . -DMINDSPORE_PATH={mindspore_path}\\n', 'make\\n', '```\\n', '\\n', '构建成功后，执行用例。\\n', '\\n', '```bash\\n', './tensor_add_sample\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '3\\n', '5\\n', '7\\n', '9\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend_install_conda.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_conda.md", "text_entry": "['# Conda方式安装MindSpore Ascend 910版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Conda方式安装MindSpore Ascend 910版本](#conda方式安装mindspore-ascend-910版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装Conda](#安装conda)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装gmp](#安装gmp)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '        - [创建并进入Conda虚拟环境](#创建并进入conda虚拟环境)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_conda.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Conda](https://docs.conda.io/en/latest/)是一个开源跨平台语言无关的包管理与环境管理系统，允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。\\n', '\\n', '本文档介绍如何在Ascend 910环境的Linux系统上，使用Conda方式快速安装MindSpore。\\n', '\\n', '- 如果想在一个已经配置好昇腾AI处理器配套软件包的EulerOS 2.8上通过Conda安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-conda.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统是Ubuntu 18.04/CentOS 7.6/OpenEuler 20.03/KylinV10 SP1，或者已经安装了部分依赖，如CUDA，Conda，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了昇腾AI处理器配套软件包。如果没有安装，请先参考[安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)小节进行安装。\\n', '\\n', '使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-conda.sh\\n', '# 默认安装Python 3.7以及最新版本的MindSpore\\n', '# 默认LOCAL_ASCEND路径为/usr/local/Ascend\\n', 'bash -i ./euleros-ascend-conda.sh\\n', '# 如需指定Python和MindSpore版本，以Python 3.9和MindSpore 1.6.0为例\\n', '# 且指定LOCAL_ASCEND路径为/home/xxx/Ascend，使用以下方式\\n', '# LOCAL_ASCEND=/home/xxx/Ascend PYTHON_VERSION=3.9 MINDSPORE_VERSION=1.6.0 bash -i ./euleros-ascend-conda.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 安装Conda并为MindSpore创建虚拟环境。\\n', '- 通过Conda安装MindSpore Ascend版本。\\n', '- 如果OPENMPI设置为`on`，则安装Open MPI。\\n', '\\n', '在脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '要激活虚拟环境，以Python 3.7为例，执行以下命令。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '现在您可以跳转到[配置环境变量](#配置环境变量)小节设置相关环境变量。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8/OpenEuler 20.03/KylinV10 SP1|-|编译和运行MindSpore的操作系统|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[Conda](#安装conda)|Anaconda3或Miniconda3|Python环境管理工具|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gitgmptclshpatchnumaflex)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Open MPI](#安装open-mpi-可选)|4.0.3|MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '### 安装Conda\\n', '\\n', '执行以下指令安装Miniconda。\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS和OpenEuler可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装gmp\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install libgmp-dev -y\\n', '    ```\\n', '\\n', '- CentOS 7，EulerOS和OpenEuler可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gmp-devel -y\\n', '    ```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装[Open MPI](https://www.open-mpi.org/)。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 创建并进入Conda虚拟环境\\n', '\\n', '根据您希望使用的Python版本创建对应的Conda虚拟环境并进入虚拟环境。\\n', '\\n', '如果您希望使用Python3.7.5版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '如果希望使用其他版本Python，只需更改以上命令中的Python版本。当前支持Python 3.7，Python 3.8和Python 3.9。\\n', '\\n', '在虚拟环境中安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布，升级配套软件包之后需要重新安装。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '如果升级了昇腾AI处理器配套软件包，配套的whl包也需要重新安装，先将原来的安装包卸载，再参考上述命令重新安装。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '确认您处于Conda虚拟环境中，并执行如下命令安装最新版本的MindSpore。如需安装其他版本，可参考[版本列表](https://www.mindspore.cn/versions)在`mindspore-ascend=`后指定版本号。\\n', '\\n', '```bash\\n', 'conda install mindspore-ascend -c mindspore -c conda-forge\\n', '```\\n', '\\n', '在联网状态下，安装Conda安装包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 配置环境变量\\n', '\\n', '**如果昇腾AI处理器配套软件包没有安装在默认路径**，安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"Ascend\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'conda update mindspore-ascend -c mindspore -c conda-forge\\n', '```\\n', '\\n', '注意：升级MindSpore Ascend版本conda安装包后请重新安装昇腾AI处理器配套软件包提供的whl包。首先卸载旧版本：\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '然后重新安装：\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend_install_docker.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_docker.md", "text_entry": "['# Docker方式安装MindSpore Ascend 910版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Docker方式安装MindSpore Ascend 910版本](#docker方式安装mindspore-ascend-910版本)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '    - [获取MindSpore镜像](#获取mindspore镜像)\\n', '    - [运行MindSpore镜像](#运行mindspore镜像)\\n', '    - [验证是否安装成功](#验证是否安装成功)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_docker.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Docker](https://docs.docker.com/get-docker/)是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中。通过使用Docker，可以实现MindSpore的快速部署，并与系统环境隔离。\\n', '\\n', '本文档介绍如何在Ascend 910环境的Linux系统上，使用Docker方式快速安装MindSpore。\\n', '\\n', 'MindSpore的Ascend 910镜像托管在[Ascend Hub](https://ascend.huawei.com/ascendhub/#/main)上。\\n', '\\n', '目前容器化构建选项支持情况如下：\\n', '\\n', '| 硬件平台   | Docker镜像仓库                | 标签                       | 说明                                       |\\n', '| :----- | :------------------------ | :----------------------- | :--------------------------------------- |\\n', '| Ascend | `public-ascendhub/mindspore-modelzoo` | `x.y.z` | 已经预安装与Ascend Data Center Solution `x.y.z` 版本共同发布的MindSpore的生产环境。 |\\n', '\\n', '> `x.y.z`对应Atlas Data Center Solution版本号，可以在Ascend Hub页面获取。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装Ubuntu 18.04/CentOS 7.6是64位操作系统。\\n', '\\n', '- 确认安装[Docker 18.03或更高版本](https://docs.docker.com/get-docker/)。\\n', '\\n', '## 安装昇腾AI处理器配套软件包\\n', '\\n', '昇腾软件包提供商用版和社区版两种下载途径：\\n', '\\n', '- 商用版下载需要申请权限，下载链接与安装方式请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '- 社区版下载不受限制，下载链接请前往[CANN社区版](https://www.hiascend.com/software/cann/community-history)，选择`5.1.RC1.alpha005`版本，以及在[固件与驱动](https://www.hiascend.com/hardware/firmware-drivers?tag=community)链接中获取对应的固件和驱动安装包，安装包的选择与安装方式请参照上述的商用版安装指引文档。\\n', '\\n', '- 在完成安装基础驱动与配套软件包的基础上，确认安装CANN软件包中的toolbox实用工具包，即Ascend-cann-toolbox-{version}.run，该工具包提供了Ascend NPU容器化支持的Ascend Docker runtime工具。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '## 获取MindSpore镜像\\n', '\\n', '1. 登录[Ascend Hub镜像中心](https://ascend.huawei.com/ascendhub/#/home)，注册并激活账号，获取登录指令和下载指令。\\n', '2. 获取下载权限后，进入[MindSpore镜像下载页面](https://ascendhub.huawei.com/#/detail/mindspore-modelzoo)，获取登录与下载指令并执行：\\n', '\\n', '    ```bash\\n', '    docker login -u {username} -p {password} {url}\\n', '    docker pull ascendhub.huawei.com/public-ascendhub/mindspore-modelzoo:{tag}\\n', '    ```\\n', '\\n', '    其中：\\n', '\\n', '    - `{username}` `{password}` `{url}` 代表用户的登录信息与镜像服务器信息，均为注册并激活账号后自动生成，在对应MindSpore镜像页面复制登录命令即可获取。\\n', '    - `{tag}` 对应Atlas Data Center Solution版本号，同样可以在MindSpore镜像下载页面复制下载命令获取。\\n', '\\n', '## 运行MindSpore镜像\\n', '\\n', '执行以下命令启动Docker容器实例：\\n', '\\n', '```bash\\n', 'docker run -it -u root --ipc=host \\\\\\n', '               --device=/dev/davinci0 \\\\\\n', '               --device=/dev/davinci1 \\\\\\n', '               --device=/dev/davinci2 \\\\\\n', '               --device=/dev/davinci3 \\\\\\n', '               --device=/dev/davinci4 \\\\\\n', '               --device=/dev/davinci5 \\\\\\n', '               --device=/dev/davinci6 \\\\\\n', '               --device=/dev/davinci7 \\\\\\n', '               --device=/dev/davinci_manager \\\\\\n', '               --device=/dev/devmm_svm \\\\\\n', '               --device=/dev/hisi_hdc \\\\\\n', '               -v /usr/local/Ascend/latest/driver:/usr/local/Ascend/latest/driver \\\\\\n', '               -v /usr/local/Ascend/latest/add-ons/:/usr/local/Ascend/latest/add-ons/ \\\\\\n', '               -v /var/log/npu/:/usr/slog \\\\\\n', '               ascendhub.huawei.com/public-ascendhub/mindspore-modelzoo:{tag} \\\\\\n', '               /bin/bash\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `{tag}`对应Atlas Data Center Solution版本号，在MindSpore镜像下载页面自动获取。\\n', '\\n', '如需使用MindInsight，需设置`--network`参数为”host”模式, 例如:\\n', '\\n', '```bash\\n', 'docker run -it -u root --ipc=host \\\\\\n', '               --network host \\\\\\n', '               --device=/dev/davinci0 \\\\\\n', '               --device=/dev/davinci1 \\\\\\n', '               --device=/dev/davinci2 \\\\\\n', '               --device=/dev/davinci3 \\\\\\n', '               --device=/dev/davinci4 \\\\\\n', '               --device=/dev/davinci5 \\\\\\n', '               --device=/dev/davinci6 \\\\\\n', '               --device=/dev/davinci7 \\\\\\n', '               --device=/dev/davinci_manager \\\\\\n', '               --device=/dev/devmm_svm \\\\\\n', '               --device=/dev/hisi_hdc \\\\\\n', '               -v /usr/local/Ascend/latest/driver:/usr/local/Ascend/latest/driver \\\\\\n', '               -v /usr/local/Ascend/latest/add-ons/:/usr/local/Ascend/latest/add-ons/ \\\\\\n', '               -v /var/log/npu/:/usr/slog \\\\\\n', '               ascendhub.huawei.com/public-ascendhub/mindspore-modelzoo:{tag} \\\\\\n', '               /bin/bash\\n', '```\\n', '\\n', '## 验证是否安装成功\\n', '\\n', '按照上述步骤进入MindSpore容器后，测试Docker容器是否正常工作，请运行下面的Python代码并检查输出：\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '至此，你已经成功通过Docker方式安装了MindSpore Ascend 910版本。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'import mindspore as ms\\n', 'import mindspore.ops as ops\\n', '\\n', 'ms.set_context(device_target=\"Ascend\")\\n', 'x = ms.Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = ms.Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '代码成功运行时会输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '至此，你已经成功通过Docker方式安装了MindSpore Ascend 910版本。\\n', '\\n', '验证MindInsight安装：\\n', '\\n', '输入```mindinsight start --port 8080```, 如提示启动status为success，则安装成功。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时：\\n', '\\n', '- 根据需要升级的MindSpore版本，升级对应的Ascend AI处理器配套软件包。\\n', '- 再次登录[Ascend Hub镜像中心](https://ascend.huawei.com/ascendhub/#/home)获取最新docker版本的下载命令，并执行：\\n', '\\n', '    ```bash\\n', '    docker pull ascendhub.huawei.com/public-ascendhub/mindspore-modelzoo:{tag}\\n', '    ```\\n', '\\n', '    其中：\\n', '\\n', '    - `{tag}`对应Atlas Data Center Solution版本号，同样可以在MindSpore镜像下载页面自动获取。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend_install_pip.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_pip.md", "text_entry": "['# pip方式安装MindSpore Ascend 910版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore Ascend 910版本](#pip方式安装mindspore-ascend-910版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装Python](#安装python)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装gmp](#安装gmp)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在Ascend 910环境的Linux系统上，使用pip方式快速安装MindSpore。\\n', '\\n', '- 如果您想在一个已经配置好昇腾AI处理器配套软件包的EulerOS 2.8上通过pip安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-pip.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统是Ubuntu 18.04/CentOS 7.6/OpenEuler 20.03/KylinV10 SP1，或者已经安装了部分依赖，如Python，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了昇腾AI处理器配套软件包。如果没有安装，请先参考[安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)小节进行安装。\\n', '\\n', '使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-pip.sh\\n', '# 安装MindSpore 1.7.0和Python 3.7\\n', '# 默认LOCAL_ASCEND路径为/usr/local/Ascend\\n', 'MINDSPORE_VERSION=1.7.0 bash -i ./euleros-ascend-pip.sh\\n', '# 如需指定Python和MindSpore版本，以Python 3.9和MindSpore 1.6.0为例\\n', '# 且指定LOCAL_ASCEND路径为/home/xxx/Ascend，使用以下方式\\n', '# LOCAL_ASCEND=/home/xxx/Ascend PYTHON_VERSION=3.9 MINDSPORE_VERSION=1.6.0 bash -i ./euleros-ascend-pip.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 通过APT安装Python3和pip3，并设为默认。\\n', '- 通过pip安装MindSpore Ascend版本。\\n', '- 如果OPENMPI设置为`on`，则安装Open MPI。\\n', '\\n', '在脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '以Python 3.7为例，执行以下命令激活虚拟环境。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '现在您可以跳转到[配置环境变量](#配置环境变量)小节设置相关环境变量。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8/OpenEuler 20.03/KylinV10 SP1|-|编译和运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Open MPI](#安装open-mpi-可选)|4.0.3|MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过Conda进行安装。\\n', '\\n', '安装Miniconda：\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '```bash\\n', 'conda create -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '如果您的环境为ARM架构，请确认当前使用的Python配套的pip版本>=19.3。使用以下命令升级pip。\\n', '\\n', '```bash\\n', 'python -m pip install -U pip\\n', '```\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布。如果之前安装过昇腾AI处理器配套软件包，需要先使用如下命令卸载相应的包。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '默认安装路径使用以下指令安装。如果安装路径不是默认路径，需要将命令中的路径替换为安装路径。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS和OpenEuler可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装gmp\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install libgmp-dev -y\\n', '    ```\\n', '\\n', '- CentOS 7，EulerOS和OpenEuler可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gmp-devel -y\\n', '    ```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装[Open MPI](https://www.open-mpi.org/)。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'export MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据系统架构及Python版本执行如下命令安装MindSpore。\\n', '\\n', '```bash\\n', '# x86_64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/x86_64/mindspore_ascend-${MS_VERSION/-/}-cp37-cp37m-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/x86_64/mindspore_ascend-${MS_VERSION/-/}-cp38-cp38-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/x86_64/mindspore_ascend-${MS_VERSION/-/}-cp39-cp39-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/aarch64/mindspore_ascend-${MS_VERSION/-/}-cp37-cp37m-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/aarch64/mindspore_ascend-${MS_VERSION/-/}-cp38-cp38-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/ascend/aarch64/mindspore_ascend-${MS_VERSION/-/}-cp39-cp39-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 配置环境变量\\n', '\\n', '**如果昇腾AI处理器配套软件包没有安装在默认路径**，安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"Ascend\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore-ascend=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.6.0rc1；如果升级到正式版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_ascend_install_source.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_source.md", "text_entry": "['# 源码编译方式安装MindSpore Ascend 910版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [源码编译方式安装MindSpore Ascend 910版本](#源码编译方式安装mindspore-ascend-910版本)\\n', '    - [环境准备-自动 推荐](#环境准备-自动-推荐)\\n', '    - [环境准备-手动](#环境准备-手动)\\n', '        - [安装Python](#安装python)\\n', '        - [安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)\\n', '        - [安装wheel和setuptools](#安装wheel和setuptools)\\n', '        - [安装GCC](#安装gcc)\\n', '        - [安装git gmp tclsh patch NUMA Flex](#安装git-gmp-tclsh-patch-numa-flex)\\n', '        - [安装git-lfs](#安装git-lfs)\\n', '        - [安装CMake](#安装cmake)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '    - [从代码仓下载源码](#从代码仓下载源码)\\n', '    - [编译MindSpore](#编译mindspore)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [配置环境变量](#配置环境变量)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_ascend_install_source.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在Ascend 910环境的Linux系统上，使用源码编译方式快速安装MindSpore。\\n', '\\n', '- 如果您想在一个已经配置好昇腾AI处理器配套软件包的EulerOS 2.8上配置一个可以编译MindSpore的环境，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-source.sh)进行一键式配置，参见[环境准备-自动，推荐](#环境准备-自动推荐)小节。自动安装脚本会安装编译MindSpore所需的依赖。\\n', '\\n', '- 如果您的系统是Ubuntu 18.04/CentOS 7.6/OpenEuler 20.03/KylinV10 SP1，或者已经安装了部分依赖，如Python，GCC等，则推荐参照[环境准备-手动](#环境准备-手动)小节的安装步骤手动安装。\\n', '\\n', '## 环境准备-自动 推荐\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了昇腾AI处理器配套软件包。如果没有安装，请先参考[安装昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)小节进行安装。\\n', '\\n', '使用以下命令获取自动安装脚本并执行。通过自动安装脚本配置的环境，仅支持编译MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/euleros-ascend-source.sh\\n', '# 默认安装Python 3.7\\n', '# 默认LOCAL_ASCEND路径为/usr/local/Ascend\\n', 'bash -i ./euleros-ascend-source.sh\\n', '# 如需指定安装Python 3.9，并且安装可选依赖Open MPI\\n', '# 且指定LOCAL_ASCEND路径为/home/xxx/Ascend，使用以下方式\\n', '# LOCAL_ASCEND=/home/xxx/Ascend PYTHON_VERSION=3.9 OPENMPI=on bash -i ./euleros-ascend-source.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 安装MindSpore所需的编译依赖，如GCC，CMake等。\\n', '- 安装Python3和pip3，并设为默认。\\n', '- 如果OPENMPI设置为`on`，则安装Open MPI。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '以Python 3.7为例，执行以下命令激活虚拟环境。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '现在您可以跳转到[从代码仓下载源码](#从代码仓下载源码)小节开始下载编译MindSpore。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 环境准备-手动\\n', '\\n', '下表列出了编译安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu 18.04/CentOS 7.6/EulerOS 2.8/OpenEuler 20.03/KylinV10 SP1|-|编译和运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[昇腾AI处理器配套软件包](#安装昇腾ai处理器配套软件包)|-|MindSpore使用的Ascend平台AI计算库|\\n', '|[wheel](#安装wheel和setuptools)|0.32.0及以上|MindSpore使用的Python打包工具|\\n', '|[setuptools](#安装wheel和setuptools)|44.0及以上|MindSpore使用的Python包管理工具|\\n', '|[GCC](#安装gcc)|7.3.0|用于编译MindSpore的C++编译器|\\n', '|[git](#安装git-gmp-tclsh-patch-numa-flex)|-|MindSpore使用的源代码管理工具|\\n', '|[git-lfs](#安装git-lfs)|-|MindSpore使用的源代码管理工具|\\n', '|[CMake](#安装cmake)|3.18.3及以上|编译构建MindSpore的工具|\\n', '|[gmp](#安装git-gmp-tclsh-patch-numa-flex)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Flex](#安装git-gmp-tclsh-patch-numa-flex)|2.5.35及以上版本|MindSpore使用的词法分析器|\\n', '|[tclsh](#安装git-gmp-tclsh-patch-numa-flex)|-|MindSpore sqlite编译依赖|\\n', '|[patch](#安装git-gmp-tclsh-patch-numa-flex)|2.5及以上|MindSpore使用的源代码补丁工具|\\n', '|[NUMA](#安装git-gmp-tclsh-patch-numa-flex)|2.0.11及以上|MindSpore使用的非一致性内存访问库|\\n', '|[Open MPI](#安装open-mpi-可选)|4.0.3|MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过Conda进行安装。\\n', '\\n', '安装Miniconda：\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '```bash\\n', 'conda create -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装昇腾AI处理器配套软件包\\n', '\\n', '详细安装方法请参考[Ascend Data Center Solution 22.0.RC1安装指引文档](https://support.huawei.com/enterprise/zh/doc/EDOC1100246310)。\\n', '\\n', '安装包默认安装路径为`/usr/local/Ascend`。安装后确认当前用户有权限访问昇腾AI处理器配套软件包的安装路径，若无权限，需要root用户将当前用户添加到`/usr/local/Ascend`所在的用户组。\\n', '\\n', '安装昇腾AI处理器配套软件包提供的whl包，whl包随配套软件包发布。如果之前安装过昇腾AI处理器配套软件包，需要先使用如下命令卸载相应的包。\\n', '\\n', '```bash\\n', 'pip uninstall te topi hccl -y\\n', '```\\n', '\\n', '默认安装路径使用以下指令安装。如果安装路径不是默认路径，需要将命令中的路径替换为安装路径。\\n', '\\n', '```bash\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/topi-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/te-*-py3-none-any.whl\\n', 'pip install /usr/local/Ascend/ascend-toolkit/latest/fwkacllib/lib64/hccl-*-py3-none-any.whl\\n', '```\\n', '\\n', '### 安装wheel和setuptools\\n', '\\n', '在安装完成Python后，使用以下命令安装。\\n', '\\n', '```bash\\n', 'pip install wheel\\n', 'pip install -U setuptools\\n', '```\\n', '\\n', '### 安装GCC\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install gcc-7 -y\\n', '    ```\\n', '\\n', '- CentOS 7可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install centos-release-scl\\n', '    sudo yum install devtoolset-7\\n', '    ```\\n', '\\n', '    安装完成后，需要使用如下命令切换到GCC 7。\\n', '\\n', '    ```bash\\n', '    scl enable devtoolset-7 bash\\n', '    ```\\n', '\\n', '- EulerOS和OpenEuler可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install gcc -y\\n', '    ```\\n', '\\n', '### 安装git gmp tclsh patch NUMA Flex\\n', '\\n', '- Ubuntu 18.04可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo apt-get install git libgmp-dev tcl patch libnuma-dev flex -y\\n', '    ```\\n', '\\n', '- CentOS 7，EulerOS和OpenEuler可以使用以下命令安装。\\n', '\\n', '    ```bash\\n', '    sudo yum install git gmp-devel tcl patch numactl-devel flex -y\\n', '    ```\\n', '\\n', '### 安装git-lfs\\n', '\\n', '- Ubuntu使用如下命令安装。\\n', '\\n', '    ```bash\\n', '    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\\n', '    sudo apt-get install git-lfs -y\\n', '    git lfs install\\n', '    ```\\n', '\\n', '- CentOS 7使用如下命令安装。\\n', '\\n', '    ```bash\\n', '    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash\\n', '    sudo yum install git-lfs -y\\n', '    git lfs install\\n', '    ```\\n', '\\n', '- EulerOS和OpenEuler使用以下命令安装。\\n', '\\n', '    根据系统架构选择相应的版本下载。\\n', '\\n', '    ```bash\\n', '    # x64\\n', '    curl -OL https://github.com/git-lfs/git-lfs/releases/download/v3.1.2/git-lfs-linux-amd64-v3.1.2.tar.gz\\n', '    # arm64\\n', '    curl -OL https://github.com/git-lfs/git-lfs/releases/download/v3.1.2/git-lfs-linux-arm64-v3.1.2.tar.gz\\n', '    ```\\n', '\\n', '    解压并安装。\\n', '\\n', '    ```bash\\n', '    mkdir git-lfs\\n', '    tar xf git-lfs-linux-*-v3.1.2.tar.gz -C git-lfs\\n', '    cd git-lfs\\n', '    sudo bash install.sh\\n', '    ```\\n', '\\n', '### 安装CMake\\n', '\\n', '- Ubuntu 18.04可以通过以下命令安装[CMake](https://cmake.org/)。\\n', '\\n', '    ```bash\\n', '    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\\n', '    sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\\n', '    sudo apt-get install cmake -y\\n', '    ```\\n', '\\n', '- 其他Linux系统可以使用以下命令安装。\\n', '\\n', '    根据系统架构选择不同的下载链接。\\n', '\\n', '    ```bash\\n', '    # x86使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.sh\\n', '    # aarch64使用\\n', '    curl -O https://cmake.org/files/v3.19/cmake-3.19.8-Linux-aarch64.sh\\n', '    ```\\n', '\\n', '    执行安装脚本安装CMake，默认安装到`/usr/local`目录下。\\n', '\\n', '    ```bash\\n', '    sudo mkdir /usr/local/cmake-3.19.8\\n', '    sudo bash cmake-3.19.8-Linux-*.sh --prefix=/usr/local/cmake-3.19.8 --exclude-subdir\\n', '    ```\\n', '\\n', '    最后需要将CMake添加到`PATH`环境变量中。如果使用默认安装目录执行以下命令，其他安装目录需要做相应修改。\\n', '\\n', '    ```bash\\n', '    echo -e \"export PATH=/usr/local/cmake-3.19.8/bin:\\\\$PATH\" >> ~/.bashrc\\n', '    source ~/.bashrc\\n', '    ```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装[Open MPI](https://www.open-mpi.org/)。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '## 从代码仓下载源码\\n', '\\n', '```bash\\n', 'git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '## 编译MindSpore\\n', '\\n', '进入MindSpore根目录，然后执行编译脚本。\\n', '\\n', '```bash\\n', 'cd mindspore\\n', 'bash build.sh -e ascend -S on\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `build.sh`中默认的编译线程数为8，如果编译机性能较差可能会出现编译错误，可在执行中增加-j{线程数}来减少线程数量。如`bash build.sh -e ascend -j4`。\\n', '- 默认从github下载依赖源码，当-S选项设置为`on`时，从对应的gitee镜像下载。\\n', '- 关于`build.sh`更多用法请参看脚本头部的说明。\\n', '\\n', '## 安装MindSpore\\n', '\\n', '```bash\\n', 'pip install output/mindspore_ascend-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 配置环境变量\\n', '\\n', '**如果昇腾AI处理器配套软件包没有安装在默认路径**，安装好MindSpore之后，需要导出Runtime相关环境变量，下述命令中`LOCAL_ASCEND=/usr/local/Ascend`的`/usr/local/Ascend`表示配套软件包的安装路径，需注意将其改为配套软件包的实际安装路径。\\n', '\\n', '```bash\\n', '# control log level. 0-DEBUG, 1-INFO, 2-WARNING, 3-ERROR, 4-CRITICAL, default level is WARNING.\\n', 'export GLOG_v=2\\n', '\\n', '# Conda environmental options\\n', 'LOCAL_ASCEND=/usr/local/Ascend # the root directory of run package\\n', '\\n', '# lib libraries that the run package depends on\\n', 'export LD_LIBRARY_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/lib64:${LOCAL_ASCEND}/driver/lib64:${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe/op_tiling:${LD_LIBRARY_PATH}\\n', '\\n', '# Environment variables that must be configured\\n', '## TBE operator implementation tool path\\n', 'export TBE_IMPL_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp/op_impl/built-in/ai_core/tbe\\n', '## OPP path\\n', 'export ASCEND_OPP_PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/opp\\n', '## AICPU path\\n', 'export ASCEND_AICPU_PATH=${ASCEND_OPP_PATH}/..\\n', '## TBE operator compilation tool path\\n', 'export PATH=${LOCAL_ASCEND}/ascend-toolkit/latest/fwkacllib/ccec_compiler/bin/:${PATH}\\n', '## Python library that TBE implementation depends on\\n', 'export PYTHONPATH=${TBE_IMPL_PATH}:${PYTHONPATH}\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"Ascend\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '- 直接在线升级\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore-ascend\\n', '    ```\\n', '\\n', '- 本地源码编译升级\\n', '\\n', '    在源码根目录下执行编译脚本`build.sh`成功后，在`output`目录下找到编译生成的whl安装包，然后执行命令进行升级。\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore_ascend-*.whl\\n', '    ```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_install_conda.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_conda.md", "text_entry": "['# Conda方式安装MindSpore CPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Conda方式安装MindSpore CPU版本](#conda方式安装mindspore-cpu版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装Conda](#安装conda)\\n', '        - [安装GCC和gmp](#安装gcc和gmp)\\n', '        - [创建并进入Conda虚拟环境](#创建并进入conda虚拟环境)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_conda.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Conda](https://docs.conda.io/en/latest/)是一个开源跨平台语言无关的包管理与环境管理系统，允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。\\n', '\\n', '本文档介绍如何在CPU环境的Linux系统上，使用Conda方式快速安装MindSpore。下面以Ubuntu 18.04为例说明MindSpore安装步骤。\\n', '\\n', '- 如果您想在一个全新的Ubuntu 18.04上通过Conda安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-cpu-conda.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统已经安装了部分依赖，如Conda，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '自动安装脚本需要更改软件源配置以及通过APT安装依赖，所以在执行中需要申请root权限。使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-cpu-conda.sh\\n', '# 默认安装Python 3.7和最新版本的MindSpore\\n', 'bash ./ubuntu-cpu-conda.sh\\n', '# 如需指定Python和MindSpore版本，以Python 3.9和MindSpore 1.6.0为例，使用以下方式\\n', '# PYTHON_VERSION=3.9 MINDSPORE_VERSION=1.6.0 bash ./ubuntu-cpu-conda.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 更改软件源配置为华为云源。\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 安装Conda并为MindSpore创建虚拟环境。\\n', '- 通过Conda安装MindSpore CPU版本。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效。自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '要激活虚拟环境，以Python 3.7为例，执行以下命令。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu|18.04|运行MindSpore的操作系统|\\n', '|[Conda](#安装conda)|Anaconda3或Miniconda3|Python环境管理工具|\\n', '|[GCC](#安装gcc和gmp)|7.3.0到9.4.0之间|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gcc和gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Conda\\n', '\\n', '执行以下指令安装Miniconda。\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '### 安装GCC和gmp\\n', '\\n', '可以通过以下命令安装GCC和gmp。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 libgmp-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 创建并进入Conda虚拟环境\\n', '\\n', '根据您希望使用的Python版本创建对应的Conda虚拟环境并进入虚拟环境。\\n', '\\n', '如果您希望使用Python3.7.5版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '如果希望使用其他版本Python，只需更改以上命令中的Python版本。当前支持Python 3.7，Python 3.8和Python 3.9。\\n', '\\n', '### 安装MindSpore\\n', '\\n', '确认您处于Conda虚拟环境中，并执行如下命令安装最新版本的MindSpore。如需安装其他版本，可参考[版本列表](https://www.mindspore.cn/versions)在`mindspore-cpu=`后指定版本号。\\n', '\\n', '```bash\\n', 'conda install mindspore-cpu -c mindspore -c conda-forge -y\\n', '```\\n', '\\n', '在联网状态下，安装Conda安装包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'conda update mindspore-cpu -c mindspore -c conda-forge\\n', '```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_install_docker.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_docker.md", "text_entry": "['# Docker方式安装MindSpore CPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Docker方式安装MindSpore CPU版本](#docker方式安装mindspore-cpu版本)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [获取MindSpore镜像](#获取mindspore镜像)\\n', '    - [运行MindSpore镜像](#运行mindspore镜像)\\n', '    - [验证是否安装成功](#验证是否安装成功)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_docker.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Docker](https://docs.docker.com/get-docker/)是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中。通过使用Docker，可以实现MindSpore的快速部署，并与系统环境隔离。\\n', '\\n', '本文档介绍如何在CPU环境的Linux系统上，使用Docker方式快速安装MindSpore。\\n', '\\n', 'MindSpore的Docker镜像托管在[Huawei SWR](https://support.huaweicloud.com/swr/index.html)上。\\n', '\\n', '目前容器化构建选项支持情况如下：\\n', '\\n', '| 硬件平台   | Docker镜像仓库                | 标签                       | 说明                                       |\\n', '| :----- | :------------------------ | :----------------------- | :--------------------------------------- |\\n', '| CPU    | `mindspore/mindspore-cpu` | `x.y.z`                  | 已经预安装MindSpore `x.y.z` CPU版本的生产环境。       |\\n', '|        |                           | `devel`                  | 提供开发环境从源头构建MindSpore（`CPU`后端）。安装详情请参考<https://www.mindspore.cn/install> 。 |\\n', '|        |                           | `runtime`                | 提供运行时环境，未安装MindSpore二进制包（`CPU`后端）。         |\\n', '\\n', '> `x.y.z`对应MindSpore版本号，例如安装1.1.0版本MindSpore时，`x.y.z`应写为1.1.0。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装基于x86架构的64位Linux操作系统，其中Ubuntu 18.04是经过验证的。\\n', '- 确认安装[Docker 18.03或者更高版本](https://docs.docker.com/get-docker/)。\\n', '\\n', '## 获取MindSpore镜像\\n', '\\n', '对于`CPU`后端，可以直接使用以下命令获取最新的稳定镜像：\\n', '\\n', '```bash\\n', 'docker pull swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-cpu:{tag}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `{tag}`对应上述表格中的标签。\\n', '\\n', '## 运行MindSpore镜像\\n', '\\n', '执行以下命令启动Docker容器实例：\\n', '\\n', '```bash\\n', 'docker run -it swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-cpu:{tag} /bin/bash\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `{tag}`对应上述表格中的标签。\\n', '\\n', '如需使用可视化调试调优工具MindInsight，需设置`--network`参数为`host`模式，例如:\\n', '\\n', '```bash\\n', 'docker run -it --network host swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-cpu:{tag} /bin/bash\\n', '```\\n', '\\n', '## 验证是否安装成功\\n', '\\n', '- 如果你安装的是指定版本`x.y.z`的容器。\\n', '\\n', '按照上述步骤进入MindSpore容器后，测试Docker是否正常工作，请运行下面的Python代码并检查输出：\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '至此，你已经成功通过Docker方式安装了MindSpore CPU版本。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'import mindspore.context as context\\n', 'import mindspore.ops as ops\\n', 'from mindspore import Tensor\\n', '\\n', 'context.set_context(mode=context.PYNATIVE_MODE, device_target=\"CPU\")\\n', '\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '代码成功运行时会输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '至此，你已经成功通过Docker方式安装了MindSpore CPU版本。\\n', '\\n', '- 验证MindInsight安装：\\n', '\\n', '    输入```mindinsight start --port 8080```，如提示启动status为success，则安装成功。\\n', '\\n', '- 如果你安装的是`runtime`标签的容器，需要自行安装MindSpore。\\n', '\\n', '    进入[MindSpore安装指南页面](https://www.mindspore.cn/install)，选择CPU硬件平台、Linux-x86_64操作系统和pip的安装方式，获得安装指南。运行容器后参考安装指南，通过pip方式安装MindSpore CPU版本，并进行验证。\\n', '\\n', '- 如果你安装的是`devel`标签的容器，需要自行编译并安装MindSpore。\\n', '\\n', '    进入[MindSpore安装指南页面](https://www.mindspore.cn/install)，选择CPU硬件平台、Linux-x86_64操作系统和Source的安装方式，获得安装指南。运行容器后，下载MindSpore代码仓并参考安装指南，通过源码编译方式安装MindSpore CPU版本，并进行验证。\\n', '\\n', '如果您想了解更多关于MindSpore Docker镜像的构建过程，请查看[docker repo](https://gitee.com/mindspore/mindspore/blob/r1.7/scripts/docker/README.md#)了解详细信息。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_install_nightly.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_nightly.md", "text_entry": "['# pip方式安装MindSpore CPU Nightly版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore CPU Nightly版本](#pip方式安装mindspore-cpu-nightly版本)\\n', '    - [安装MindSpore与依赖软件](#安装mindspore与依赖软件)\\n', '        - [安装Python](#安装python)\\n', '        - [安装GCC和gmp](#安装gcc和gmp)\\n', '    - [下载安装MindSpore](#下载安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_nightly.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', 'MindSpore Nightly是包含当前最新功能与bugfix的预览版本，但是可能未经完整的测试与验证，希望体验最新功能或者问题修复的用户可以使用该版本。\\n', '\\n', '本文档介绍如何在CPU环境的Linux系统上，使用pip方式快速安装MindSpore Nightly。\\n', '\\n', '在确认系统环境信息的过程中，如需了解如何安装第三方依赖软件，可以参考社区提供的实践——[在Ubuntu（CPU）上进行源码编译安装MindSpore](https://www.mindspore.cn/news/newschildren?id=365)中的第三方依赖软件安装相关部分，在此感谢社区成员[damon0626](https://gitee.com/damon0626)的分享。\\n', '\\n', '## 安装MindSpore与依赖软件\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '| 软件名称              | 版本             | 作用                          |\\n', '| --------------------- | ---------------- | ----------------------------- |\\n', '| Ubuntu                | 18.04            | 运行MindSpore的操作系统       |\\n', '| [Python](#安装python) | 3.7-3.9          | MindSpore的使用依赖Python环境 |\\n', '| [GCC](#安装gcc和gmp)  | 7.3.0到9.4.0之间 | 用于编译MindSpore的C++编译器  |\\n', '| [gmp](#安装gcc和gmp)  | 6.1.2            | MindSpore使用的多精度算术库   |\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过多种方式进行安装。\\n', '\\n', '- 通过Conda安装Python\\n', '\\n', '  安装Miniconda：\\n', '\\n', '  ```bash\\n', '  cd /tmp\\n', '  curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', '  bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', '  cd -\\n', '  . ~/miniconda3/etc/profile.d/conda.sh\\n', '  conda init bash\\n', '  ```\\n', '\\n', '  安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '  创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '  ```bash\\n', '  conda create -n mindspore_py37 python=3.7.5 -y\\n', '  conda activate mindspore_py37\\n', '  ```\\n', '\\n', '- 通过APT安装Python，命令如下。\\n', '\\n', '  ```bash\\n', '  sudo apt-get update\\n', '  sudo apt-get install software-properties-common -y\\n', '  sudo add-apt-repository ppa:deadsnakes/ppa -y\\n', '  sudo apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y\\n', '  # 将新安装的Python设为默认\\n', '  sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100\\n', '  # 安装pip\\n', '  python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple\\n', '  sudo update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100\\n', '  pip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple\\n', '  ```\\n', '\\n', '  若要安装其他Python版本，只需更改命令中的`3.7`。\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装GCC和gmp\\n', '\\n', '可以通过以下命令安装GCC和gmp。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 libgmp-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '## 下载安装MindSpore\\n', '\\n', '执行如下命令安装MindSpore：\\n', '\\n', '```bash\\n', 'pip install mindspore-dev -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '- pip会自动安装当前最新版本的Nightly版本MindSpore，如果需要安装指定版本，请参照下方升级MindSpore版本相关指导，在下载时手动指定版本。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore-dev=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.6.0rc1.dev20211125；如果希望自动升级到最新版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_install_pip.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_pip.md", "text_entry": "['# pip方式安装MindSpore CPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore CPU版本](#pip方式安装mindspore-cpu版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装Python](#安装python)\\n', '        - [安装GCC和gmp](#安装gcc和gmp)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在CPU环境的Linux系统上，使用pip方式快速安装MindSpore。下面以Ubuntu 18.04为例说明MindSpore安装步骤。\\n', '\\n', '- 如果您想在一个全新的Ubuntu 18.04上通过pip安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-cpu-pip.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统已经安装了部分依赖，如Python，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '自动安装脚本需要更改软件源配置以及通过APT安装依赖，所以需要申请root权限。使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-cpu-pip.sh\\n', '# 安装MindSpore 1.7.0和Python 3.7\\n', 'MINDSPORE_VERSION=1.7.0 bash ./ubuntu-cpu-pip.sh\\n', '# 如需指定Python和MindSpore版本，以Python 3.9和MindSpore 1.6.0为例，使用以下方式\\n', '# PYTHON_VERSION=3.9 MINDSPORE_VERSION=1.6.0 bash ./ubuntu-cpu-pip.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 更改软件源配置为华为云源。\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 通过APT安装Python3和pip3，并设为默认。\\n', '- 通过pip安装MindSpore CPU版本。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu|18.04|运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[GCC](#安装gcc和gmp)|7.3.0到9.4.0之间|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gcc和gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过多种方式进行安装。\\n', '\\n', '- 通过Conda安装Python\\n', '\\n', '    安装Miniconda：\\n', '\\n', '    ```bash\\n', '    cd /tmp\\n', '    curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', '    bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', '    cd -\\n', '    . ~/miniconda3/etc/profile.d/conda.sh\\n', '    conda init bash\\n', '    ```\\n', '\\n', '    安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '    创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '    ```bash\\n', '    conda create -n mindspore_py37 python=3.7.5 -y\\n', '    conda activate mindspore_py37\\n', '    ```\\n', '\\n', '- 通过APT安装Python，命令如下。\\n', '\\n', '    ```bash\\n', '    sudo apt-get update\\n', '    sudo apt-get install software-properties-common -y\\n', '    sudo add-apt-repository ppa:deadsnakes/ppa -y\\n', '    sudo apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y\\n', '    # 将新安装的Python设为默认\\n', '    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100\\n', '    # 安装pip\\n', '    python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple\\n', '    sudo update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100\\n', '    pip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple\\n', '    ```\\n', '\\n', '    若要安装其他Python版本，只需更改命令中的`3.7`。\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装GCC和gmp\\n', '\\n', '可以通过以下命令安装GCC和gmp。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 libgmp-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'export MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据系统架构及Python版本执行如下命令安装MindSpore。\\n', '\\n', '```bash\\n', '# x86_64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/x86_64/mindspore-${MS_VERSION/-/}-cp37-cp37m-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/x86_64/mindspore-${MS_VERSION/-/}-cp38-cp38-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/x86_64/mindspore-${MS_VERSION/-/}-cp39-cp39-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/aarch64/mindspore-${MS_VERSION/-/}-cp37-cp37m-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/aarch64/mindspore-${MS_VERSION/-/}-cp38-cp38-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/aarch64/mindspore-${MS_VERSION/-/}-cp39-cp39-linux_aarch64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.6.0rc1；如果升级到正式版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_install_source.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_source.md", "text_entry": "['# 源码编译方式安装MindSpore CPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [源码编译方式安装MindSpore CPU版本](#源码编译方式安装mindspore-cpu版本)\\n', '    - [环境准备-自动 推荐](#环境准备-自动-推荐)\\n', '    - [环境准备-手动](#环境准备-手动)\\n', '        - [安装Python](#安装python)\\n', '        - [安装wheel和setuptools](#安装wheel和setuptools)\\n', '        - [安装GCC git gmp tclsh patch和NUMA](#安装gcc-git-gmp-tclsh-patch和numa)\\n', '        - [安装CMake](#安装cmake)\\n', '        - [安装LLVM-可选](#安装llvm-可选)\\n', '    - [从代码仓下载源码](#从代码仓下载源码)\\n', '    - [编译MindSpore](#编译mindspore)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证安装是否成功](#验证安装是否成功)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_source.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在CPU环境的Linux系统上，使用源码编译方式快速安装MindSpore。下面以Ubuntu 18.04为例说明MindSpore编译安装步骤。\\n', '\\n', '- 如果您想在一个全新的Ubuntu 18.04上配置一个可以编译MindSpore的环境，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-cpu-source.sh)进行一键式配置，参见[环境准备-自动，推荐](#环境准备-自动推荐)小节。自动安装脚本会安装编译MindSpore所需的依赖。\\n', '\\n', '- 如果您的系统已经安装了部分依赖，如Python，GCC等，则推荐参照[环境准备-手动](#环境准备-手动)小节的安装步骤手动安装。\\n', '\\n', '## 环境准备-自动 推荐\\n', '\\n', '自动安装脚本需要更改软件源配置以及通过APT安装依赖，所以需要申请root权限。使用以下命令获取自动安装脚本并执行。通过自动安装脚本配置的环境，仅支持编译MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-cpu-source.sh\\n', '# 默认安装Python 3.7\\n', 'bash ./ubuntu-cpu-source.sh\\n', '# 如需指定Python版本，以Python 3.9为例，使用以下方式\\n', '# PYTHON_VERSION=3.9 bash ./ubuntu-cpu-source.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 更改软件源配置为华为云源。\\n', '- 安装MindSpore所需的编译依赖，如GCC，CMake等。\\n', '- 通过APT安装Python3和pip3，并设为默认。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效，然后跳转到[从代码仓下载源码](#从代码仓下载源码)小节下载编译MindSpore。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 环境准备-手动\\n', '\\n', '下表列出了编译安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu|18.04|编译和运行MindSpore的操作系统|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[wheel](#安装wheel和setuptools)|0.32.0及以上|MindSpore使用的Python打包工具|\\n', '|[setuptools](#安装wheel和setuptools)|44.0及以上|MindSpore使用的Python包管理工具|\\n', '|[GCC](#安装gcc-git-gmp-tclsh-patch和numa)|7.3.0到9.4.0之间|用于编译MindSpore的C++编译器|\\n', '|[git](#安装gcc-git-gmp-tclsh-patch和numa)|-|MindSpore使用的源代码管理工具|\\n', '|[CMake](#安装cmake)|3.18.3及以上|编译构建MindSpore的工具|\\n', '|[gmp](#安装gcc-git-gmp-tclsh-patch和numa)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[tclsh](#安装gcc-git-gmp-tclsh-patch和numa)|-|MindSpore sqlite编译依赖|\\n', '|[patch](#安装gcc-git-gmp-tclsh-patch和numa)|2.5及以上|MindSpore使用的源代码补丁工具|\\n', '|[NUMA](#安装gcc-git-gmp-tclsh-patch和numa)|2.0.11及以上|MindSpore使用的非一致性内存访问库|\\n', '|[LLVM](#安装llvm-可选)|12.0.1|MindSpore使用的编译器框架（可选，图算融合以及稀疏计算需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过多种方式进行安装。\\n', '\\n', '- 通过Conda安装Python。\\n', '\\n', '    安装Miniconda：\\n', '\\n', '    ```bash\\n', '    cd /tmp\\n', '    curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', '    bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', '    cd -\\n', '    . ~/miniconda3/etc/profile.d/conda.sh\\n', '    conda init bash\\n', '    ```\\n', '\\n', '    安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '    创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '    ```bash\\n', '    conda create -n mindspore_py37 python=3.7.5 -y\\n', '    conda activate mindspore_py37\\n', '    ```\\n', '\\n', '- 通过APT安装Python，命令如下。\\n', '\\n', '    ```bash\\n', '    sudo apt-get update\\n', '    sudo apt-get install software-properties-common -y\\n', '    sudo add-apt-repository ppa:deadsnakes/ppa -y\\n', '    sudo apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y\\n', '    # 将新安装的Python设为默认\\n', '    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100\\n', '    # 安装pip\\n', '    python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple\\n', '    sudo update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100\\n', '    pip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple\\n', '    ```\\n', '\\n', '    若要安装其他Python版本，只需更改命令中的`3.7`。\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装wheel和setuptools\\n', '\\n', '在安装完成Python后，使用以下命令安装。\\n', '\\n', '```bash\\n', 'pip install wheel\\n', 'pip install -U setuptools\\n', '```\\n', '\\n', '### 安装GCC git gmp tclsh patch和NUMA\\n', '\\n', '可以通过以下命令安装GCC，git，gmp，tclsh，patch和NUMA。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 git libgmp-dev tcl patch libnuma-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 安装CMake\\n', '\\n', '可以通过以下命令安装[CMake](https://cmake.org/)。\\n', '\\n', '```bash\\n', 'wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\\n', 'sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\\n', 'sudo apt-get install cmake -y\\n', '```\\n', '\\n', '### 安装LLVM-可选\\n', '\\n', '可以通过以下命令安装[LLVM](https://llvm.org/)。\\n', '\\n', '```bash\\n', 'wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\\n', 'sudo add-apt-repository \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main\"\\n', 'sudo apt-get update\\n', 'sudo apt-get install llvm-12-dev -y\\n', '```\\n', '\\n', '## 从代码仓下载源码\\n', '\\n', '```bash\\n', 'git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '## 编译MindSpore\\n', '\\n', '进入mindspore根目录，然后执行编译脚本。\\n', '\\n', '```bash\\n', 'cd mindspore\\n', 'bash build.sh -e cpu -j4 -S on\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 如果编译机性能较好，可在执行中增加-j{线程数}来增加线程数量。如`bash build.sh -e cpu -j12`。\\n', '- 默认从github下载依赖源码，当-S选项设置为`on`时，从对应的gitee镜像下载。\\n', '- 关于`build.sh`更多用法请参看脚本头部的说明。\\n', '\\n', '## 安装MindSpore\\n', '\\n', '```bash\\n', 'pip install output/mindspore-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证安装是否成功\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '- 直接在线升级\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore\\n', '    ```\\n', '\\n', '- 本地源码编译升级\\n', '\\n', '    在源码根目录下执行编译脚本`build.sh`成功后，在`output`目录下找到编译生成的whl安装包，然后执行命令进行升级。\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore-*.whl\\n', '    ```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_mac_install_conda.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_conda.md", "text_entry": "['# Conda方式安装MindSpore CPU版本-macOS\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Conda方式安装MindSpore CPU版本-macOS](#conda方式安装mindspore-cpu版本-macos)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [创建并进入Conda虚拟环境](#创建并进入conda虚拟环境)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_install_conda.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Conda](https://docs.conda.io/en/latest/)是一个开源跨平台语言无关的包管理与环境管理系统，允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。\\n', '\\n', '本文档介绍如何在macOS系统上，使用Conda方式快速安装MindSpore。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 根据下表中的系统及芯片情况确定合适的Python与Conda版本，macOS版本及芯片信息可点击桌面左上角苹果标志->`关于本机`获悉：\\n', '\\n', '    |芯片|计算架构|macOS版本|支持Python版本|支持Conda版本|\\n', '    |-|-|-|-|-|\\n', '    |M1|ARM|11.3|Python 3.8-3.9|Mambaforge 或 Miniforge|\\n', '    |Intel|x86_64|10.15/11.3|Python 3.7-3.9|Anaconda 或 MiniConda|\\n', '\\n', '- 确认安装与当前系统及芯片型号兼容的Conda版本。\\n', '\\n', '    - 如果您喜欢Conda提供的完整能力，可以选择下载[Anaconda3](https://repo.anaconda.com/archive/)或[Mambaforge](https://github.com/conda-forge/miniforge)。\\n', '    - 如果您需要节省磁盘空间，或者喜欢自定义安装Conda软件包，可以选择下载[Miniconda3](https://repo.anaconda.com/miniconda/)或[Miniforge](https://github.com/conda-forge/miniforge)。\\n', '\\n', '## 创建并进入Conda虚拟环境\\n', '\\n', '根据您希望使用的Python版本创建对应的Conda虚拟环境并进入虚拟环境。\\n', '\\n', '- 如果您希望使用Python3.7.5版本(适配64-bit macOS 10.15)：\\n', '\\n', '  ```bash\\n', '  conda create -c conda-forge -n mindspore_py37 -c conda-forge python=3.7.5\\n', '  conda activate mindspore_py37\\n', '  ```\\n', '\\n', '- 如果您希望使用Python3.8.0版本(适配64-bit macOS 10.15或11.3)：\\n', '\\n', '  ```bash\\n', '  conda create -c conda-forge -n mindspore_py38 -c conda-forge python=3.8.0\\n', '  conda activate mindspore_py38\\n', '  ```\\n', '\\n', '- 如果您希望使用Python3.9.0版本(适配64-bit macOS 10.15或11.3)：\\n', '\\n', '  ```bash\\n', '  conda create -c conda-forge -n mindspore_py39 -c conda-forge python=3.9.0\\n', '  conda activate mindspore_py39\\n', '  ```\\n', '\\n', '## 安装MindSpore\\n', '\\n', '确认您处于Conda虚拟环境中，并执行如下命令安装最新版本的MindSpore。如需安装其他版本，可参考[版本列表](https://www.mindspore.cn/versions)在`mindspore-cpu=`后指定版本号。\\n', '\\n', '```bash\\n', 'conda install mindspore-cpu -c mindspore -c conda-forge\\n', '```\\n', '\\n', '在联网状态下，安装Conda安装包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'conda update mindspore-cpu -c mindspore -c conda-forge\\n', '```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_mac_install_nightly.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_nightly.md", "text_entry": "['# pip方式安装MindSpore CPU Nightly版本-macOS\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore CPU Nightly版本-macOS](#pip方式安装mindspore-cpu-nightly版本-macos)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [下载安装MindSpore](#下载安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', 'MindSpore Nightly是包含当前最新功能与bugfix的预览版本，但是可能未经完整的测试与验证，希望体验最新功能或者问题修复的用户可以使用该版本。\\n', '\\n', '本文档介绍如何在macOS系统上使用pip方式快速安装MindSpore Nightly。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 根据下表中的系统及芯片情况确定合适的Python版本，macOS版本及芯片信息可点击桌面左上角苹果标志->`关于本机`获悉：\\n', '\\n', '    |芯片|计算架构|macOS版本|支持Python版本|\\n', '    |-|-|-|-|\\n', '    |M1|ARM|11.3|Python 3.8-3.9|\\n', '    |Intel|x86_64|10.15/11.3|Python 3.7-3.9|\\n', '\\n', '- 确认安装对应的Python版本。如果未安装或者已安装其他版本的Python，可以选择下载并安装：\\n', '\\n', '    - Python 3.7.5 (64-bit)：[官网](https://www.python.org/ftp/python/3.7.5/python-3.7.5-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.7.5/python-3.7.5-macosx10.9.pkg)。\\n', '    - Python 3.8.0 (64-bit)：[官网](https://www.python.org/ftp/python/3.8.0/python-3.8.0-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.8.0/python-3.8.0-macosx10.9.pkg)。\\n', '    - Python 3.9.0 (64-bit)：[官网](https://www.python.org/ftp/python/3.9.0/python-3.9.0-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.9.0/python-3.9.0-macosx10.9.pkg)。\\n', '\\n', '## 下载安装MindSpore\\n', '\\n', '执行如下命令安装MindSpore：\\n', '\\n', '```bash\\n', 'pip install mindspore-dev -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '- pip会自动安装当前最新版本的Nightly版本MindSpore，如果需要安装指定版本，请参照下方升级MindSpore版本相关指导，在下载时手动指定版本。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore-dev=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.5.0rc1；如果升级到正式版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_mac_install_pip.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_pip.md", "text_entry": "['# pip方式安装MindSpore CPU版本-macOS\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore CPU版本-macOS](#pip方式安装mindspore-cpu版本-macos)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在macOS系统上使用pip方式快速安装MindSpore。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 根据下表中的系统及芯片情况确定合适的Python版本，macOS版本及芯片信息可点击桌面左上角苹果标志->`关于本机`获悉：\\n', '\\n', '    |芯片|计算架构|macOS版本|支持Python版本|\\n', '    |-|-|-|-|\\n', '    |M1|ARM|11.3|Python 3.8-3.9|\\n', '    |Intel|x86_64|10.15/11.3|Python 3.7-3.9|\\n', '\\n', '- 确认安装对应的Python版本。如果未安装或者已安装其他版本的Python，可以选择下载并安装：\\n', '\\n', '    - Python 3.7.5 (64-bit)：[官网](https://www.python.org/ftp/python/3.7.5/python-3.7.5-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.7.5/python-3.7.5-macosx10.9.pkg)。\\n', '    - Python 3.8.0 (64-bit)：[官网](https://www.python.org/ftp/python/3.8.0/python-3.8.0-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.8.0/python-3.8.0-macosx10.9.pkg)。\\n', '    - Python 3.9.0 (64-bit)：[官网](https://www.python.org/ftp/python/3.9.0/python-3.9.0-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.9.0/python-3.9.0-macosx10.9.pkg)。\\n', '\\n', '## 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'export MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据系统架构及Python版本执行如下命令安装MindSpore。\\n', '\\n', '```bash\\n', '# x86_64 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/x86_64/mindspore-${MS_VERSION/-/}-cp37-cp37m-macosx_10_15_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/x86_64/mindspore-${MS_VERSION/-/}-cp38-cp38-linux_macosx_10_15_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# x86_64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/x86_64/mindspore-${MS_VERSION/-/}-cp39-cp39-macosx_10_15_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/aarch64/mindspore-${MS_VERSION/-/}-cp38-cp38-macosx_11_0_arm64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# aarch64 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/cpu/aarch64/mindspore-${MS_VERSION/-/}-cp39-cp39-macosx_11_0_arm64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.5.0rc1；如果升级到正式版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_mac_install_source.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_source.md", "text_entry": "['# 源码编译方式安装MindSpore CPU版本-macOS\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [源码编译方式安装MindSpore CPU版本-macOS](#源码编译方式安装mindspore-cpu版本-macos)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [从代码仓下载源码](#从代码仓下载源码)\\n', '    - [编译MindSpore](#编译mindspore)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证安装是否成功](#验证安装是否成功)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_mac_install_source.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在macOS系统上使用源码编译方式快速安装MindSpore。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 根据下表中的系统及芯片情况确定合适的Python版本，macOS版本及芯片信息可点击桌面左上角苹果标志->`关于本机`获悉：\\n', '\\n', '    |芯片|计算架构|macOS版本|支持Python版本|\\n', '    |-|-|-|-|\\n', '    |M1|ARM|11.3|Python 3.8-3.9|\\n', '    |Intel|x86_64|10.15/11.3|Python 3.7-3.9|\\n', '\\n', '- 确认安装对应的Python版本。如果未安装或者已安装其他版本的Python，可以选择下载并安装：\\n', '\\n', '    - Python 3.7.5 (64-bit)：[官网](https://www.python.org/ftp/python/3.7.5/python-3.7.5-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.7.5/python-3.7.5-macosx10.9.pkg)。\\n', '    - Python 3.8.0 (64-bit)：[官网](https://www.python.org/ftp/python/3.8.0/python-3.8.0-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.8.0/python-3.8.0-macosx10.9.pkg)。\\n', '    - Python 3.9.0 (64-bit)：[官网](https://www.python.org/ftp/python/3.9.0/python-3.9.0-macosx10.9.pkg) 或者 [华为云](https://repo.huaweicloud.com/python/3.9.0/python-3.9.0-macosx10.9.pkg)。\\n', '\\n', '- 确认安装[Xcode](https://xcodereleases.com/) (>=12.4 and <= 13.0) ，12.4(X86)及13.0(M1) 已测试。\\n', '\\n', '- 确认安装`Command Line Tools for Xcode`。如果未安装，使用命令`sudo xcode-select --install`安装Command Line Tools。\\n', '\\n', '- 确认安装[CMake 3.18.3及以上版本](https://cmake.org/download/)。如果没有安装，可以使用`brew install cmake`进行安装。\\n', '\\n', '- 确认安装[patch 2.5](https://ftp.gnu.org/gnu/patch/)。如果没有安装，可以使用`brew install patch`进行安装。\\n', '\\n', '- 确认安装[wheel 0.32.0及以上版本](https://pypi.org/project/wheel/)。如果没有安装，可以使用`pip install wheel` 进行安装。\\n', '\\n', '## 从代码仓下载源码\\n', '\\n', '```bash\\n', 'git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '## 编译MindSpore\\n', '\\n', '在源码根目录下执行如下命令。\\n', '\\n', '```bash\\n', 'export CC=/usr/bin/clang\\n', 'export CXX=/usr/bin/clang++\\n', 'bash build.sh -e cpu -S on -j4  # -j 为编译时线程配置，如果CPU性能较好，使用多线程方式编译，参数通常为CPU核数的两倍\\n', '```\\n', '\\n', '## 安装MindSpore\\n', '\\n', '```bash\\n', 'pip install output/mindspore-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '如果在安装scipy包时出现编译错误，可以尝试先使用下面的命令安装scipy包，再安装MindSpore包。\\n', '\\n', '```bash\\n', 'pip install --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple scipy\\n', '```\\n', '\\n', '## 验证安装是否成功\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '- 直接在线升级\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore\\n', '    ```\\n', '\\n', '- 本地源码编译升级\\n', '\\n', '    在源码根目录下执行编译脚本`build.sh`成功后，在`output`目录下找到编译生成的whl安装包，然后执行命令进行升级。\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore-{version}-{python_version}-macosx_{platform_version}_{arch}.whl\\n', '    ```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_win_install_conda.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_conda.md", "text_entry": "['# Conda方式安装MindSpore CPU版本-Windows\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Conda方式安装MindSpore CPU版本-Windows](#conda方式安装mindspore-cpu版本-windows)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [创建并进入Conda虚拟环境](#创建并进入conda虚拟环境)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_conda.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Conda](https://docs.conda.io/en/latest/)是一个开源跨平台语言无关的包管理与环境管理系统，允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。\\n', '\\n', '本文档介绍如何在CPU环境的Windows系统上，使用Conda方式快速安装MindSpore。\\n', '\\n', '在确认系统环境信息的过程中，如需了解如何安装第三方依赖软件，可以参考社区提供的实践——[在Windows（CPU）上进行源码编译安装MindSpore](https://www.mindspore.cn/news/newschildren?id=364)中的第三方依赖软件安装相关部分，在此感谢社区成员[lvmingfu](https://gitee.com/lvmingfu)的分享。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装Windows 10是x86架构64位操作系统。\\n', '- 确认安装与当前系统兼容的Conda版本。\\n', '\\n', '    - 如果您喜欢Conda提供的完整能力，可以选择下载[Anaconda3](https://repo.anaconda.com/archive/)。\\n', '    - 如果您需要节省磁盘空间，或者喜欢自定义安装Conda软件包，可以选择下载[Miniconda3](https://repo.anaconda.com/miniconda/)。\\n', '\\n', '## 创建并进入Conda虚拟环境\\n', '\\n', '根据您希望使用的Python版本创建对应的Conda虚拟环境并进入虚拟环境。\\n', '如果您希望使用Python3.7.5版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py37 -c conda-forge python=3.7.5\\n', 'activate mindspore_py37\\n', '```\\n', '\\n', '如果您希望使用Python3.8.0版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py38 -c conda-forge python=3.8.0\\n', 'activate mindspore_py38\\n', '```\\n', '\\n', '如果您希望使用Python3.9.0版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py39 -c conda-forge python=3.9.0\\n', 'activate mindspore_py39\\n', '```\\n', '\\n', '## 安装MindSpore\\n', '\\n', '确认您处于Conda虚拟环境中，并执行如下命令安装最新版本的MindSpore。如需安装其他版本，可参考[版本列表](https://www.mindspore.cn/versions)在`mindspore-cpu=`后指定版本号。\\n', '\\n', '```bash\\n', 'conda install mindspore-cpu -c mindspore -c conda-forge\\n', '```\\n', '\\n', '在联网状态下，安装Conda安装包时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'conda update mindspore-cpu -c mindspore -c conda-forge\\n', '```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_win_install_nightly.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_nightly.md", "text_entry": "['# pip方式安装MindSpore CPU Nightly版本-Windows\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore CPU Nightly版本-Windows](#pip方式安装mindspore-cpu-nightly版本-windows)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [下载安装MindSpore](#下载安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_nightly.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', 'MindSpore Nightly是包含当前最新功能与bugfix的预览版本，但是可能未经完整的测试与验证，希望体验最新功能或者问题修复的用户可以使用该版本。\\n', '\\n', '本文档介绍如何在CPU环境的Windows系统上，使用pip方式快速安装MindSpore Nightly。\\n', '\\n', '在确认系统环境信息的过程中，如需了解如何安装第三方依赖软件，可以参考社区提供的实践——[在Windows（CPU）上进行源码编译安装MindSpore](https://www.mindspore.cn/news/newschildren?id=364)中的第三方依赖软件安装相关部分，在此感谢社区成员[lvmingfu](https://gitee.com/lvmingfu)的分享。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装Windows 10是x86架构64位操作系统。\\n', '- 确认安装Python 3.7-3.9之间的任意版本。以下列版本为例：\\n', '    - Python 3.7.5版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.7.5/python-3.7.5-amd64.exe)。\\n', '    - Python 3.8.0版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.8.0/python-3.8.0-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.8.0/python-3.8.0-amd64.exe)。\\n', '    - Python 3.9.0版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.9.0/python-3.9.0-amd64.exe)。\\n', '- 安装Python完毕后，将Python和pip添加到系统环境变量。\\n', '    - 添加Python：控制面板->系统->高级系统设置->环境变量。双击系统变量中的Path，将`python.exe`的路径添加进去。\\n', '    - 添加pip：`python.exe`同一级目录中的`Scripts`文件夹即为Python自带的pip文件，将其路径添加到系统环境变量中即可。\\n', '\\n', '## 下载安装MindSpore\\n', '\\n', '执行如下命令安装MindSpore：\\n', '\\n', '```bash\\n', 'pip install mindspore-dev -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '- pip会自动安装当前最新版本的Nightly版本MindSpore，如果需要安装指定版本，请参照下方升级MindSpore版本相关指导，在下载时手动指定版本。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore-dev=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.6.0rc1.dev20211125；如果希望自动升级到最新版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_win_install_pip.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_pip.md", "text_entry": "['# pip方式安装MindSpore CPU版本-Windows\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore CPU版本-Windows](#pip方式安装mindspore-cpu版本-windows)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在CPU环境的Windows系统上，使用pip方式快速安装MindSpore。\\n', '\\n', '在确认系统环境信息的过程中，如需了解如何安装第三方依赖软件，可以参考社区提供的实践——[在Windows（CPU）上进行源码编译安装MindSpore](https://www.mindspore.cn/news/newschildren?id=364)中的第三方依赖软件安装相关部分，在此感谢社区成员[lvmingfu](https://gitee.com/lvmingfu)的分享。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装Windows 10是x86架构64位操作系统。\\n', '- 确认安装Python 3.7-3.9之间的任意版本。以下列版本为例：\\n', '    - Python 3.7.5版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.7.5/python-3.7.5-amd64.exe)。\\n', '    - Python 3.8.0版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.8.0/python-3.8.0-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.8.0/python-3.8.0-amd64.exe)。\\n', '    - Python 3.9.0版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.9.0/python-3.9.0-amd64.exe)。\\n', '- 安装Python完毕后，将Python和pip添加到系统环境变量。\\n', '    - 添加Python：控制面板->系统->高级系统设置->环境变量。双击系统变量中的Path，将`python.exe`的路径添加进去。\\n', '    - 添加pip：`python.exe`同一级目录中的`Scripts`文件夹即为Python自带的pip文件，将其路径添加到系统环境变量中即可。\\n', '\\n', '## 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'set MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据Python版本执行如下命令安装MindSpore。\\n', '\\n', '```bash\\n', '# Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/%MS_VERSION%/MindSpore/cpu/x86_64/mindspore-%MS_VERSION:-=%-cp37-cp37m-win_amd64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/%MS_VERSION%/MindSpore/cpu/x86_64/mindspore-%MS_VERSION:-=%-cp38-cp38-win_amd64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/%MS_VERSION%/MindSpore/cpu/x86_64/mindspore-%MS_VERSION:-=%-cp39-cp39-win_amd64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.5.0rc1；如果升级到正式版本，`=={version}`字段可以缺省。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_cpu_win_install_source.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_source.md", "text_entry": "['\\ufeff# 源码编译方式安装MindSpore CPU版本-Windows\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [源码编译方式安装MindSpore CPU版本-Windows](#源码编译方式安装mindspore-cpu版本-windows)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [从代码仓下载源码](#从代码仓下载源码)\\n', '    - [编译MindSpore](#编译mindspore)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_cpu_win_install_source.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在CPU环境的Windows系统上，使用源码编译方法快速安装MindSpore。\\n', '\\n', '详细步骤可以参考社区提供的实践——[在Windows（CPU）上进行源码编译安装MindSpore](https://www.mindspore.cn/news/newschildren?id=364)，在此感谢社区成员[lvmingfu](https://gitee.com/lvmingfu)的分享。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装Windows 10是x86架构64位操作系统。\\n', '- 确认安装[Visual C++ Redistributable for Visual Studio 2015](https://www.microsoft.com/zh-CN/download/details.aspx?id=48145)。\\n', '- 确认安装了[git](https://github.com/git-for-windows/git/releases/download/v2.29.2.windows.2/Git-2.29.2.2-64-bit.exe)工具。\\n', '    - 如果git没有安装在`ProgramFiles`，需设置环境变量指定`patch.exe`的位置，例如git安装在`D:\\\\git`时，需设置`set MS_PATCH_PATH=D:\\\\git\\\\usr\\\\bin`。\\n', '- 确认安装[MinGW-W64 GCC-7.3.0](https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/7.3.0/threads-posix/seh/x86_64-7.3.0-release-posix-seh-rt_v5-rev0.7z)。\\n', '    - 安装路径中不能出现中文和日文，安装完成后将安装路径下的`MinGW\\\\bin`添加到系统环境变量。例如安装在`D:\\\\gcc`，则需要将`D:\\\\gcc\\\\MinGW\\\\bin`添加到系统环境变量Path中。\\n', '- 确认安装[CMake 3.18.3版本](https://github.com/Kitware/Cmake/releases/tag/v3.18.3)。\\n', '    - 安装路径中不能出现中文和日文，安装完成后将`cmake.exe`的路径添加到系统环境变量Path中。\\n', '- 确认安装[ActivePerl 5.28.1.2801版本](https://downloads.activestate.com/ActivePerl/releases/5.28.1.2801/ActivePerl-5.28.1.2801-MSWin32-x64-24563874.exe)。\\n', '- 确认安装Python 3.7-3.9之间的任意版本。以下列版本为例：\\n', '    - Python 3.7.5版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.7.5/python-3.7.5-amd64.exe)。\\n', '    - Python 3.8.0版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.8.0/python-3.8.0-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.8.0/python-3.8.0-amd64.exe)。\\n', '    - Python 3.9.0版本 64位，下载地址：[官网](https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe)或[华为云](https://mirrors.huaweicloud.com/python/3.9.0/python-3.9.0-amd64.exe)。\\n', '    - 安装路径中不能出现中文等特殊符号，安装完成后需要将`python.exe`的路径添加到系统环境变量Path中，Python自带的pip文件在`python.exe`同级目录的`Scripts`文件夹中，也需要将pip文件的路径添加到系统环境变量Path中。\\n', '- 确认安装[wheel 0.32.0及以上版本](https://pypi.org/project/wheel/)。\\n', '\\n', '## 从代码仓下载源码\\n', '\\n', '```bash\\n', 'git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '## 编译MindSpore\\n', '\\n', '在源码根目录下执行如下命令：\\n', '\\n', '```bash\\n', 'call build.bat\\n', '```\\n', '\\n', '## 安装MindSpore\\n', '\\n', '```bash\\n', 'for %x in (output\\\\mindspore*.whl) do pip install %x -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '```bash\\n', 'cd ..\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '执行`import mindspore`应在MindSpore源码根目录之外，因为Windows上的Python将当前目录视为执行环境，可能产生目录查找问题。\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '- 直接在线升级\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore\\n', '    ```\\n', '\\n', '- 本地源码编译升级\\n', '\\n', '    在源码根目录下执行编译脚本`build.sh`成功后，在`output`目录下找到编译生成的whl安装包，然后执行命令进行升级。\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore-{version}-{python_version}-win_amd64.whl\\n', '    ```\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_gpu_install_conda.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_conda.md", "text_entry": "['# Conda方式安装MindSpore GPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Conda方式安装MindSpore GPU版本](#conda方式安装mindspore-gpu版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装CUDA](#安装cuda)\\n', '        - [安装cuDNN](#安装cudnn)\\n', '        - [安装Conda](#安装conda)\\n', '        - [安装GCC和gmp](#安装gcc和gmp)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '        - [安装TensorRT-可选](#安装tensorrt-可选)\\n', '        - [创建并进入Conda虚拟环境](#创建并进入conda虚拟环境)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_conda.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Conda](https://docs.conda.io/en/latest/)是一个开源跨平台语言无关的包管理与环境管理系统，允许用户方便地安装不同版本的二进制软件包与该计算平台需要的所有库。\\n', '\\n', '本文档介绍如何在GPU环境的Linux系统上，使用Conda方式快速安装MindSpore。下面以Ubuntu 18.04为例说明MindSpore安装步骤。\\n', '\\n', '- 如果您想在一个全新的带有GPU的Ubuntu 18.04上通过Conda安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-gpu-conda.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统已经安装了部分依赖，如CUDA，Conda，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了NVIDIA GPU驱动。CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。执行以下指令检查驱动版本。\\n', '\\n', '```bash\\n', 'nvidia-smi\\n', '```\\n', '\\n', '如果未安装GPU驱动，执行如下命令安装。\\n', '\\n', '```bash\\n', 'sudo apt-get update\\n', 'sudo apt-get install ubuntu-drivers-common\\n', 'sudo ubuntu-drivers autoinstall\\n', '```\\n', '\\n', '安装完成后请重启系统。\\n', '\\n', '自动安装脚本需要更改软件源配置以及通过APT安装依赖，所以在执行中需要申请root权限。使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-gpu-conda.sh\\n', '# 默认安装Python 3.7，CUDA 11.1以及最新版本的MindSpore\\n', 'bash -i ./ubuntu-gpu-conda.sh\\n', '# 如需指定Python，CUDA和MindSpore版本，以Python 3.9，CUDA 10.1和MindSpore 1.6.0为例，使用以下方式\\n', '# PYTHON_VERSION=3.9 CUDA_VERSION=10.1 MINDSPORE_VERSION=1.6.0 bash -i ./ubuntu-gpu-conda.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 更改软件源配置为华为云源。\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 下载CUDA和cuDNN并安装。\\n', '- 安装Conda并为MindSpore创建虚拟环境。\\n', '- 通过Conda安装MindSpore GPU版本。\\n', '- 如果OPENMPI设置为`on`，则安装Open MPI。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效。自动安装脚本会为MindSpore创建名为`mindspore_pyXX`的虚拟环境。其中`XX`为Python版本，如Python 3.7则虚拟环境名为`mindspore_py37`。执行以下命令查看所有虚拟环境。\\n', '\\n', '```bash\\n', 'conda env list\\n', '```\\n', '\\n', '要激活虚拟环境，以Python 3.7为例，执行以下命令。\\n', '\\n', '```bash\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了安装MindSpore所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu|18.04|运行MindSpore的操作系统|\\n', '|[CUDA](#安装cuda)|10.1或11.1|MindSpore GPU使用的并行计算架构|\\n', '|[cuDNN](#安装cudnn)|7.6.x或8.0.x|MindSpore GPU使用的深度神经网络加速库|\\n', '|[Conda](#安装conda)|Anaconda3或Miniconda3|Python环境管理工具|\\n', '|[GCC](#安装gcc和gmp)|7.3.0到9.4.0之间|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gcc和gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Open MPI](#安装open-mpi-可选)|4.0.3|MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要）|\\n', '|[TensorRT](#安装tensorrt-可选)|7.2.2|MindSpore使用的高性能深度学习推理SDK（可选，Serving推理需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装CUDA\\n', '\\n', 'MindSpore GPU支持CUDA 10.1和CUDA 11.1。NVIDIA官方给出了多种安装方式和安装指导，详情可查看[CUDA下载页面](https://developer.nvidia.com/cuda-toolkit-archive)和[CUDA安装指南](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)。\\n', '下面仅给出Linux系统使用runfile方式安装的指导。\\n', '\\n', '在安装CUDA前需要先安装相关依赖，执行以下命令。\\n', '\\n', '```bash\\n', 'sudo apt-get install linux-headers-$(uname -r) gcc-7\\n', '```\\n', '\\n', 'CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。可以执行`nvidia-smi`指令确认显卡驱动版本。如果驱动版本不满足要求，CUDA安装过程中可以选择同时安装驱动，安装驱动后需要重启系统。\\n', '\\n', '使用以下命令安装CUDA 11.1（推荐）。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_455.32.00_linux.run\\n', 'sudo sh cuda_11.1.1_455.32.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-11.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '或者使用以下命令安装CUDA 10.1。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run\\n', 'sudo sh cuda_10.1.243_418.87.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-10.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '### 安装cuDNN\\n', '\\n', '完成CUDA的安装后，在[cuDNN页面](https://developer.nvidia.com/zh-cn/cudnn)登录并下载对应的cuDNN安装包。如果之前安装了CUDA 10.1，下载配套CUDA 10.1的cuDNN v7.6.x；如果之前安装了CUDA 11.1，下载配套CUDA 11.1的cuDNN v8.0.x。注意下载后缀名为tgz的压缩包。假设下载的cuDNN包名为`cudnn.tgz`，安装的CUDA版本为11.1，执行以下命令安装cuDNN。\\n', '\\n', '```bash\\n', 'tar -zxvf cudnn.tgz\\n', 'sudo cp cuda/include/cudnn.h /usr/local/cuda-11.1/include\\n', 'sudo cp cuda/lib64/libcudnn* /usr/local/cuda-11.1/lib64\\n', 'sudo chmod a+r /usr/local/cuda-11.1/include/cudnn.h /usr/local/cuda-11.1/lib64/libcudnn*\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '### 安装Conda\\n', '\\n', '执行以下指令安装Miniconda。\\n', '\\n', '```bash\\n', 'cd /tmp\\n', 'curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', 'bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', 'cd -\\n', '. ~/miniconda3/etc/profile.d/conda.sh\\n', 'conda init bash\\n', '```\\n', '\\n', '安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '### 安装GCC和gmp\\n', '\\n', '可以通过以下命令安装GCC和gmp。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 libgmp-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9（注意，GCC 9不兼容CUDA 10.1）。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装Open MPI。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 安装TensorRT-可选\\n', '\\n', '完成CUDA和cuDNN的安装后，在[TensorRT下载页面](https://developer.nvidia.com/nvidia-tensorrt-7x-download)下载配套CUDA 11.1的TensorRT 7.2.2，注意选择下载TAR格式的安装包。假设下载的文件名为`TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz`。使用以下命令安装TensorRT。\\n', '\\n', '```bash\\n', 'tar xzf TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz\\n', 'cd TensorRT-7.2.2.3\\n', 'echo -e \"export TENSORRT_HOME=$PWD\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=\\\\$TENSORRT_HOME/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 创建并进入Conda虚拟环境\\n', '\\n', '根据您希望使用的Python版本创建对应的Conda虚拟环境并进入虚拟环境。\\n', '\\n', '如果您希望使用Python3.7.5版本：\\n', '\\n', '```bash\\n', 'conda create -c conda-forge -n mindspore_py37 python=3.7.5 -y\\n', 'conda activate mindspore_py37\\n', '```\\n', '\\n', '如果希望使用其他版本Python，只需更改以上命令中的Python版本。当前支持Python 3.7，Python 3.8和Python 3.9。\\n', '\\n', '### 安装MindSpore\\n', '\\n', '确认您处于Conda虚拟环境中，并执行如下命令安装最新版本的MindSpore。如需安装其他版本，可参考[版本列表](https://www.mindspore.cn/versions)在`mindspore-gpu=`后指定版本号。\\n', '\\n', 'CUDA 10.1版本：\\n', '\\n', '```bash\\n', 'conda install mindspore-gpu cudatoolkit=10.1 -c mindspore -c conda-forge\\n', '```\\n', '\\n', 'CUDA 11.1版本：\\n', '\\n', '```bash\\n', 'conda install mindspore-gpu cudatoolkit=11.1 -c mindspore -c conda-forge\\n', '```\\n', '\\n', '在联网状态下，安装MindSpore时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '运行MindSpore GPU版本前，请确保nvcc的安装路径已经添加到`PATH`与`LD_LIBRARY_PATH`环境变量中，如果没有添加，以安装在默认路径的CUDA11为例，可以执行如下操作：\\n', '\\n', '```bash\\n', 'export PATH=/usr/local/cuda-11.1/bin:$PATH\\n', 'export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"GPU\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_gpu_install_docker.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_docker.md", "text_entry": "['# Docker方式安装MindSpore GPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [Docker方式安装MindSpore GPU版本](#docker方式安装mindspore-gpu版本)\\n', '    - [确认系统环境信息](#确认系统环境信息)\\n', '    - [nvidia-container-toolkit安装](#nvidia-container-toolkit安装)\\n', '    - [获取MindSpore镜像](#获取mindspore镜像)\\n', '    - [运行MindSpore镜像](#运行mindspore镜像)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_docker.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '[Docker](https://docs.docker.com/get-docker/)是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中。通过使用Docker，可以实现MindSpore的快速部署，并与系统环境隔离。\\n', '\\n', '本文档介绍如何在GPU环境的Linux系统上，使用Docker方式快速安装MindSpore。\\n', '\\n', 'MindSpore的Docker镜像托管在[Huawei SWR](https://support.huaweicloud.com/swr/index.html)上。\\n', '\\n', '目前容器化构建选项支持情况如下：\\n', '\\n', '| 硬件平台 | Docker镜像仓库            | 标签      | 说明                                                         |\\n', '| :------- | :------------------------ | :-------- | :----------------------------------------------------------- |\\n', '| GPU      | `mindspore/mindspore-gpu-{cuda10.1|cuda11.1}` | `x.y.z` | 已经预安装MindSpore `x.y.z` GPU版本的生产环境。(CUDA10.1或CUDA11.1后端) |\\n', '|          | `mindspore/mindspore-gpu` | `devel`   | 提供开发环境从源头构建MindSpore（`GPU CUDA11.1`后端）。安装详情请参考<https://www.mindspore.cn/install> 。 |\\n', '|          | `mindspore/mindspore-gpu` | `runtime` | 提供运行时环境，未安装MindSpore二进制包（`GPU CUDA11.1`后端）。 |\\n', '\\n', '> **注意：** 不建议从源头构建GPU `devel` Docker镜像后直接安装whl包。我们强烈建议您在GPU `runtime` Docker镜像中传输并安装whl包。\\n', '> `x.y.z`对应MindSpore版本号，例如安装1.1.0版本MindSpore时，`x.y.z`应写为1.1.0。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '- 确认安装基于x86架构的64位Linux操作系统，其中Ubuntu 18.04是经过验证的。\\n', '- 确认安装[Docker 18.03或者更高版本](https://docs.docker.com/get-docker/)。\\n', '\\n', '## nvidia-container-toolkit安装\\n', '\\n', '对于`GPU`后端，请确保`nvidia-container-toolkit`已经提前安装，以下是`Ubuntu`用户的`nvidia-container-toolkit`安装指南：\\n', '\\n', '```bash\\n', '# Acquire version of operating system version\\n', 'DISTRIBUTION=$(. /etc/os-release; echo $ID$VERSION_ID)\\n', 'curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\\n', 'curl -s -L https://nvidia.github.io/nvidia-docker/$DISTRIBUTION/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\\n', '\\n', 'sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit nvidia-docker2\\n', 'sudo systemctl restart docker\\n', '```\\n', '\\n', 'daemon.json是Docker的配置文件，编辑文件daemon.json配置容器运行时，让Docker可以使用nvidia-container-runtime:\\n', '\\n', '```bash\\n', '$ vim /etc/docker/daemon.json\\n', '{\\n', '    \"runtimes\": {\\n', '        \"nvidia\": {\\n', '            \"path\": \"nvidia-container-runtime\",\\n', '            \"runtimeArgs\": []\\n', '        }\\n', '    }\\n', '}\\n', '```\\n', '\\n', '再次重启Docker:\\n', '\\n', '```bash\\n', 'sudo systemctl daemon-reload\\n', 'sudo systemctl restart docker\\n', '```\\n', '\\n', '## 获取MindSpore镜像\\n', '\\n', '对于`GPU`后端，可以直接使用以下命令获取最新的稳定镜像：\\n', '\\n', '```bash\\n', 'docker pull swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-gpu-{cuda_version}:{version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `{version}` 对应MindSpore版本，如1.5.0。\\n', '- `{cuda_version}` 对应MindSpore依赖的CUDA版本，包括`cuda10.1`和`cuda11.1`。\\n', '\\n', '另外，如果需要获取构建环境或者运行时环境镜像：\\n', '\\n', '```bash\\n', 'docker pull swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-gpu:{tag}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `{tag}` 对应上述表格中的标签，包括`devel`和`runtime`。\\n', '\\n', '## 运行MindSpore镜像\\n', '\\n', '执行以下命令启动Docker容器实例：\\n', '\\n', '```bash\\n', 'docker run -it -v /dev/shm:/dev/shm --runtime=nvidia swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-gpu-{cuda_version}:{tag} /bin/bash\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `-v /dev/shm:/dev/shm` 将NCCL共享内存段所在目录挂载至容器内部；\\n', '- `--runtime=nvidia` 用于指定容器运行时为`nvidia-container-runtime`；\\n', '- `{tag}`对应上述表格中的标签。\\n', '- `{cuda_version}` 对应MindSpore依赖的CUDA版本，包括`cuda10.1`和`cuda11.1`。\\n', '\\n', '如需使用可视化调试调优工具MindInsight，需设置`--network`参数为`host`模式，例如:\\n', '\\n', '```bash\\n', 'docker run -it -v /dev/shm:/dev/shm --network host --runtime=nvidia swr.cn-south-1.myhuaweicloud.com/mindspore/mindspore-gpu-{cuda_version}:{tag} /bin/bash\\n', '```\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '- 如果你安装的是指定版本`x.y.z`的容器。\\n', '\\n', '按照上述步骤进入MindSpore容器后，测试Docker是否正常工作，请运行下面的Python代码并检查输出：\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '至此，你已经成功通过Docker方式安装了MindSpore GPU版本。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'import mindspore.context as context\\n', 'import mindspore.ops as ops\\n', 'from mindspore import Tensor\\n', '\\n', 'context.set_context(device_target=\"GPU\")\\n', '\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '代码成功运行时会输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '至此，你已经成功通过Docker方式安装了MindSpore GPU版本。\\n', '\\n', '- 验证MindInsight安装：\\n', '\\n', '    输入```mindinsight start --port 8080```，如提示启动status为success，则安装成功。\\n', '\\n', '- 如果你安装的是`runtime`标签的容器，需要自行安装MindSpore。\\n', '\\n', '    进入[MindSpore安装指南页面](https://www.mindspore.cn/install)，选择GPU硬件平台、Linux-x86_64操作系统和pip的安装方式，获得安装指南。运行容器后参考安装指南，通过pip方式安装MindSpore GPU版本，并进行验证。\\n', '\\n', '- 如果你安装的是`devel`标签的容器，需要自行编译并安装MindSpore。\\n', '\\n', '    进入[MindSpore安装指南页面](https://www.mindspore.cn/install)，选择GPU硬件平台、Linux-x86_64操作系统和Source的安装方式，获得安装指南。运行容器后，下载MindSpore代码仓并参考安装指南，通过源码编译方式安装MindSpore GPU版本，并进行验证。\\n', '\\n', '如果您想了解更多关于MindSpore Docker镜像的构建过程，请查看[docker repo](https://gitee.com/mindspore/mindspore/blob/r1.7/scripts/docker/README.md#)了解详细信息。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_gpu_install_nightly.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_nightly.md", "text_entry": "['# pip方式安装MindSpore GPU Nightly版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore GPU Nightly版本](#pip方式安装mindspore-gpu-nightly版本)\\n', '    - [安装MindSpore与依赖软件](#安装mindspore与依赖软件)\\n', '        - [安装CUDA](#安装cuda)\\n', '        - [安装cuDNN](#安装cudnn)\\n', '        - [安装Python](#安装python)\\n', '        - [安装GCC和gmp](#安装gcc和gmp)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '        - [安装TensorRT-可选](#安装tensorrt-可选)\\n', '    - [下载安装MindSpore](#下载安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', 'MindSpore Nightly是包含当前最新功能与bugfix的预览版本，但是可能未经完整的测试与验证，希望体验最新功能或者问题修复的用户可以使用该版本。\\n', '\\n', '本文档介绍如何在GPU环境的Linux系统上，使用pip方式快速安装MindSpore Nightly。\\n', '\\n', '在确认系统环境信息的过程中，如需了解如何安装第三方依赖软件，可以参考社区提供的实践——[在Linux上体验源码编译安装MindSpore GPU版本](https://www.mindspore.cn/news/newschildren?id=401)中的第三方依赖软件安装相关部分，在此感谢社区成员[飞翔的企鹅](https://gitee.com/zhang_yi2020)的分享。\\n', '\\n', '## 安装MindSpore与依赖软件\\n', '\\n', '下表列出了编译安装MindSpore GPU所需的系统环境和第三方依赖。\\n', '\\n', '| 软件名称                      | 版本             | 作用                                                         |\\n', '| ----------------------------- | ---------------- | ------------------------------------------------------------ |\\n', '| Ubuntu                        | 18.04            | 编译和运行MindSpore的操作系统                                |\\n', '| [CUDA](#安装cuda)             | 10.1或11.1       | MindSpore GPU使用的并行计算架构                              |\\n', '| [cuDNN](#安装cudnn)           | 7.6.x或8.0.x     | MindSpore GPU使用的深度神经网络加速库                        |\\n', '| [Python](#安装python)         | 3.7-3.9          | MindSpore的使用依赖Python环境                                |\\n', '| [GCC](#安装gcc和gmp)          | 7.3.0到9.4.0之间 | 用于编译MindSpore的C++编译器                                 |\\n', '| [gmp](#安装gcc和gmp)          | 6.1.2            | MindSpore使用的多精度算术库                                  |\\n', '| [Open MPI](#安装open-mpi-可选) | 4.0.3            | MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要） |\\n', '| [TensorRT](#安装tensorrt-可选) | 7.2.2            | MindSpore使用的高性能深度学习推理SDK（可选，Serving推理需要） |\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装CUDA\\n', '\\n', 'MindSpore GPU支持CUDA 10.1和CUDA 11.1。NVIDIA官方给出了多种安装方式和安装指导，详情可查看[CUDA下载页面](https://developer.nvidia.com/cuda-toolkit-archive)和[CUDA安装指南](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)。\\n', '下面仅给出Linux系统使用runfile方式安装的指导。\\n', '\\n', '在安装CUDA前需要先安装相关依赖，执行以下命令。\\n', '\\n', '```bash\\n', 'sudo apt-get install linux-headers-$(uname -r) gcc-7\\n', '```\\n', '\\n', 'CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。可以执行`nvidia-smi`指令确认显卡驱动版本。如果驱动版本不满足要求，CUDA安装过程中可以选择同时安装驱动，安装驱动后需要重启系统。\\n', '\\n', '使用以下命令安装CUDA 11.1（推荐）。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_455.32.00_linux.run\\n', 'sudo sh cuda_11.1.1_455.32.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-11.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '或者使用以下命令安装CUDA 10.1。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run\\n', 'sudo sh cuda_10.1.243_418.87.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-10.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '### 安装cuDNN\\n', '\\n', '完成CUDA的安装后，在[cuDNN页面](https://developer.nvidia.com/zh-cn/cudnn)登录并下载对应的cuDNN安装包。如果之前安装了CUDA 10.1，下载配套CUDA 10.1的cuDNN v7.6.x；如果之前安装了CUDA 11.1，下载配套CUDA 11.1的cuDNN v8.0.x。注意下载后缀名为tgz的压缩包。假设下载的cuDNN包名为`cudnn.tgz`，安装的CUDA版本为11.1，执行以下命令安装cuDNN。\\n', '\\n', '```bash\\n', 'tar -zxvf cudnn.tgz\\n', 'sudo cp cuda/include/cudnn.h /usr/local/cuda-11.1/include\\n', 'sudo cp cuda/lib64/libcudnn* /usr/local/cuda-11.1/lib64\\n', 'sudo chmod a+r /usr/local/cuda-11.1/include/cudnn.h /usr/local/cuda-11.1/lib64/libcudnn*\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过多种方式进行安装。\\n', '\\n', '- 通过Conda安装Python。\\n', '\\n', '  安装Miniconda：\\n', '\\n', '  ```bash\\n', '  cd /tmp\\n', '  curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', '  bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', '  cd -\\n', '  . ~/miniconda3/etc/profile.d/conda.sh\\n', '  conda init bash\\n', '  ```\\n', '\\n', '  安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '  创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '  ```bash\\n', '  conda create -n mindspore_py37 python=3.7.5 -y\\n', '  conda activate mindspore_py37\\n', '  ```\\n', '\\n', '- 通过APT安装Python，命令如下。\\n', '\\n', '  ```bash\\n', '  sudo apt-get update\\n', '  sudo apt-get install software-properties-common -y\\n', '  sudo add-apt-repository ppa:deadsnakes/ppa -y\\n', '  sudo apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y\\n', '  # 将新安装的Python设为默认\\n', '  sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100\\n', '  # 安装pip\\n', '  python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple\\n', '  sudo update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100\\n', '  pip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple\\n', '  ```\\n', '\\n', '  若要安装其他Python版本，只需更改命令中的`3.7`。\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装GCC和gmp\\n', '\\n', '可以通过以下命令安装GCC和gmp。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 libgmp-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9（注意，GCC 9不兼容CUDA 10.1）。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装Open MPI。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 安装TensorRT-可选\\n', '\\n', '完成CUDA和cuDNN的安装后，在[TensorRT下载页面](https://developer.nvidia.com/nvidia-tensorrt-7x-download)下载配套CUDA 11.1的TensorRT 7.2.2，注意选择下载TAR格式的安装包。假设下载的文件名为`TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz`。使用以下命令安装TensorRT。\\n', '\\n', '```bash\\n', 'tar xzf TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz\\n', 'cd TensorRT-7.2.2.3\\n', 'echo -e \"export TENSORRT_HOME=$PWD\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=\\\\$TENSORRT_HOME/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '## 下载安装MindSpore\\n', '\\n', 'CUDA 11.1 版本：\\n', '\\n', '```bash\\n', 'pip install mindspore-cuda11-dev -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 当前MindSpore GPU Nightly仅提供CUDA11版本。\\n', '- 在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '- pip会自动安装当前最新版本的Nightly版本MindSpore，如果需要安装指定版本，请参照下方升级MindSpore版本相关指导，在下载时手动指定版本。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '运行MindSpore GPU版本前，请确保nvcc的安装路径已经添加到`PATH`与`LD_LIBRARY_PATH`环境变量中，如果没有添加，以安装在默认路径的CUDA11为例，可以执行如下操作：\\n', '\\n', '```bash\\n', 'export PATH=/usr/local/cuda-11.1/bin:$PATH\\n', 'export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"GPU\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore-cuda11-dev=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.6.0rc1.dev20211125；如果希望自动升级到最新版本，`=={version}`字段可以缺省。\\n', '\\n', '注意：当前MindSpore GPU nightly仅提供CUDA11版本，若仍希望使用CUDA10版本，请参考源码编译指导在安装CUDA10的环境上自行编译。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_gpu_install_pip.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_pip.md", "text_entry": "['# pip方式安装MindSpore GPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [pip方式安装MindSpore GPU版本](#pip方式安装mindspore-gpu版本)\\n', '    - [自动安装](#自动安装)\\n', '    - [手动安装](#手动安装)\\n', '        - [安装CUDA](#安装cuda)\\n', '        - [安装cuDNN](#安装cudnn)\\n', '        - [安装Python](#安装python)\\n', '        - [安装GCC和gmp](#安装gcc和gmp)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '        - [安装TensorRT-可选](#安装tensorrt-可选)\\n', '        - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_pip.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在GPU环境的Linux系统上，使用pip方式快速安装MindSpore。下面以Ubuntu 18.04为例说明MindSpore安装步骤。\\n', '\\n', '- 如果您想在一个全新的带有GPU的Ubuntu 18.04上通过pip安装MindSpore，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-gpu-pip.sh)进行一键式安装，参见[自动安装](#自动安装)小节。自动安装脚本会安装MindSpore及其所需的依赖。\\n', '\\n', '- 如果您的系统已经安装了部分依赖，如CUDA，Python，GCC等，则推荐参照[手动安装](#手动安装)小节的安装步骤手动安装。\\n', '\\n', '## 自动安装\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了NVIDIA GPU驱动。CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。执行以下指令检查驱动版本。\\n', '\\n', '```bash\\n', 'nvidia-smi\\n', '```\\n', '\\n', '如果未安装GPU驱动，执行如下命令安装。\\n', '\\n', '```bash\\n', 'sudo apt-get update\\n', 'sudo apt-get install ubuntu-drivers-common\\n', 'sudo ubuntu-drivers autoinstall\\n', '```\\n', '\\n', '安装完成后请重启系统。\\n', '\\n', '自动安装脚本需要更改软件源配置以及通过APT安装依赖，所以需要申请root权限。使用以下命令获取自动安装脚本并执行。自动安装脚本仅支持安装MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-gpu-pip.sh\\n', '# 安装MindSpore 1.7.0，Python 3.7和CUDA 11.1。\\n', 'MINDSPORE_VERSION=1.7.0 bash -i ./ubuntu-gpu-pip.sh\\n', '# 如需指定安装Python 3.9，CUDA 10.1以及MindSpore 1.6.0，使用以下方式\\n', '# PYTHON_VERSION=3.9 CUDA_VERSION=10.1 MINDSPORE_VERSION=1.6.0 bash -i ./ubuntu-gpu-pip.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 更改软件源配置为华为云源。\\n', '- 安装MindSpore所需的依赖，如GCC，gmp。\\n', '- 通过APT安装Python3和pip3，并设为默认。\\n', '- 下载CUDA和cuDNN并安装。\\n', '- 通过pip安装MindSpore GPU版本。\\n', '- 如果OPENMPI设置为`on`，则安装Open MPI。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 手动安装\\n', '\\n', '下表列出了编译安装MindSpore GPU所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu|18.04|编译和运行MindSpore的操作系统|\\n', '|[CUDA](#安装cuda)|10.1或11.1|MindSpore GPU使用的并行计算架构|\\n', '|[cuDNN](#安装cudnn)|7.6.x或8.0.x|MindSpore GPU使用的深度神经网络加速库|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[GCC](#安装gcc和gmp)|7.3.0到9.4.0之间|用于编译MindSpore的C++编译器|\\n', '|[gmp](#安装gcc和gmp)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Open MPI](#安装open-mpi-可选)|4.0.3|MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要）|\\n', '|[TensorRT](#安装tensorrt-可选)|7.2.2|MindSpore使用的高性能深度学习推理SDK（可选，Serving推理需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装CUDA\\n', '\\n', 'MindSpore GPU支持CUDA 10.1和CUDA 11.1。NVIDIA官方给出了多种安装方式和安装指导，详情可查看[CUDA下载页面](https://developer.nvidia.com/cuda-toolkit-archive)和[CUDA安装指南](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)。\\n', '下面仅给出Linux系统使用runfile方式安装的指导。\\n', '\\n', '在安装CUDA前需要先安装相关依赖，执行以下命令。\\n', '\\n', '```bash\\n', 'sudo apt-get install linux-headers-$(uname -r) gcc-7\\n', '```\\n', '\\n', 'CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。可以执行`nvidia-smi`指令确认显卡驱动版本。如果驱动版本不满足要求，CUDA安装过程中可以选择同时安装驱动，安装驱动后需要重启系统。\\n', '\\n', '使用以下命令安装CUDA 11.1（推荐）。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_455.32.00_linux.run\\n', 'sudo sh cuda_11.1.1_455.32.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-11.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '或者使用以下命令安装CUDA 10.1。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run\\n', 'sudo sh cuda_10.1.243_418.87.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-10.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '### 安装cuDNN\\n', '\\n', '完成CUDA的安装后，在[cuDNN页面](https://developer.nvidia.com/zh-cn/cudnn)登录并下载对应的cuDNN安装包。如果之前安装了CUDA 10.1，下载配套CUDA 10.1的cuDNN v7.6.x；如果之前安装了CUDA 11.1，下载配套CUDA 11.1的cuDNN v8.0.x。注意下载后缀名为tgz的压缩包。假设下载的cuDNN包名为`cudnn.tgz`，安装的CUDA版本为11.1，执行以下命令安装cuDNN。\\n', '\\n', '```bash\\n', 'tar -zxvf cudnn.tgz\\n', 'sudo cp cuda/include/cudnn.h /usr/local/cuda-11.1/include\\n', 'sudo cp cuda/lib64/libcudnn* /usr/local/cuda-11.1/lib64\\n', 'sudo chmod a+r /usr/local/cuda-11.1/include/cudnn.h /usr/local/cuda-11.1/lib64/libcudnn*\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过多种方式进行安装。\\n', '\\n', '- 通过Conda安装Python。\\n', '\\n', '    安装Miniconda：\\n', '\\n', '    ```bash\\n', '    cd /tmp\\n', '    curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', '    bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', '    cd -\\n', '    . ~/miniconda3/etc/profile.d/conda.sh\\n', '    conda init bash\\n', '    ```\\n', '\\n', '    安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '    创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '    ```bash\\n', '    conda create -n mindspore_py37 python=3.7.5 -y\\n', '    conda activate mindspore_py37\\n', '    ```\\n', '\\n', '- 通过APT安装Python，命令如下。\\n', '\\n', '    ```bash\\n', '    sudo apt-get update\\n', '    sudo apt-get install software-properties-common -y\\n', '    sudo add-apt-repository ppa:deadsnakes/ppa -y\\n', '    sudo apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y\\n', '    # 将新安装的Python设为默认\\n', '    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100\\n', '    # 安装pip\\n', '    python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple\\n', '    sudo update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100\\n', '    pip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple\\n', '    ```\\n', '\\n', '    若要安装其他Python版本，只需更改命令中的`3.7`。\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装GCC和gmp\\n', '\\n', '可以通过以下命令安装GCC和gmp。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 libgmp-dev -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9（注意，GCC 9不兼容CUDA 10.1）。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装Open MPI。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 安装TensorRT-可选\\n', '\\n', '完成CUDA和cuDNN的安装后，在[TensorRT下载页面](https://developer.nvidia.com/nvidia-tensorrt-7x-download)下载配套CUDA 11.1的TensorRT 7.2.2，注意选择下载TAR格式的安装包。假设下载的文件名为`TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz`。使用以下命令安装TensorRT。\\n', '\\n', '```bash\\n', 'tar xzf TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz\\n', 'cd TensorRT-7.2.2.3\\n', 'echo -e \"export TENSORRT_HOME=$PWD\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=\\\\$TENSORRT_HOME/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 安装MindSpore\\n', '\\n', '首先参考[版本列表](https://www.mindspore.cn/versions)选择想要安装的MindSpore版本，并进行SHA-256完整性校验。以1.7.0版本为例，执行以下命令。\\n', '\\n', '```bash\\n', 'export MS_VERSION=1.7.0\\n', '```\\n', '\\n', '然后根据CUDA版本及Python版本执行如下命令安装最新版本的MindSpore。\\n', '\\n', '```bash\\n', '# CUDA10.1 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/gpu/x86_64/cuda-10.1/mindspore_gpu-${MS_VERSION/-/}-cp37-cp37m-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# CUDA10.1 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/gpu/x86_64/cuda-10.1/mindspore_gpu-${MS_VERSION/-/}-cp38-cp38-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# CUDA10.1 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/gpu/x86_64/cuda-10.1/mindspore_gpu-${MS_VERSION/-/}-cp39-cp39-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# CUDA11.1 + Python3.7\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/gpu/x86_64/cuda-11.1/mindspore_gpu-${MS_VERSION/-/}-cp37-cp37m-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# CUDA11.1 + Python3.8\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/gpu/x86_64/cuda-11.1/mindspore_gpu-${MS_VERSION/-/}-cp38-cp38-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '# CUDA11.1 + Python3.9\\n', 'pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/${MS_VERSION}/MindSpore/gpu/x86_64/cuda-11.1/mindspore_gpu-${MS_VERSION/-/}-cp39-cp39-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装MindSpore时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '运行MindSpore GPU版本前，请确保nvcc的安装路径已经添加到`PATH`与`LD_LIBRARY_PATH`环境变量中，如果没有添加，以安装在默认路径的CUDA11为例，可以执行如下操作：\\n', '\\n', '```bash\\n', 'export PATH=/usr/local/cuda-11.1/bin:$PATH\\n', 'export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"GPU\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '```bash\\n', 'pip install --upgrade mindspore-gpu=={version}\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- 升级到rc版本时，需要手动指定`{version}`为rc版本号，例如1.6.0rc1；如果升级到正式版本，`=={version}`字段可以缺省。\\n', '\\n', '注意：1.3.0及以上版本升级时，默认选择CUDA11版本，若仍希望使用CUDA10版本，请选择相应的完整wheel安装包。\\n']"}
{"index": {"_index": "r1.7", "_id": "mindspore_gpu_install_source.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_source.md", "text_entry": "['# 源码编译方式安装MindSpore GPU版本\\n', '\\n', '<!-- TOC -->\\n', '\\n', '- [源码编译方式安装MindSpore GPU版本](#源码编译方式安装mindspore-gpu版本)\\n', '    - [环境准备-自动 推荐](#环境准备-自动-推荐)\\n', '    - [环境准备-手动](#环境准备-手动)\\n', '        - [安装CUDA](#安装cuda)\\n', '        - [安装cuDNN](#安装cudnn)\\n', '        - [安装Python](#安装python)\\n', '        - [安装wheel和setuptools](#安装wheel和setuptools)\\n', '        - [安装GCC git等依赖](#安装gcc-git等依赖)\\n', '        - [安装CMake](#安装cmake)\\n', '        - [安装Open MPI-可选](#安装open-mpi-可选)\\n', '        - [安装LLVM-可选](#安装llvm-可选)\\n', '        - [安装TensorRT-可选](#安装tensorrt-可选)\\n', '    - [从代码仓下载源码](#从代码仓下载源码)\\n', '    - [编译MindSpore](#编译mindspore)\\n', '    - [安装MindSpore](#安装mindspore)\\n', '    - [验证是否成功安装](#验证是否成功安装)\\n', '    - [升级MindSpore版本](#升级mindspore版本)\\n', '\\n', '<!-- /TOC -->\\n', '\\n', '<a href=\"https://gitee.com/mindspore/docs/blob/r1.7/install/mindspore_gpu_install_source.md\" target=\"_blank\"><img src=\"https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r1.7/resource/_static/logo_source.png\"></a>\\n', '\\n', '本文档介绍如何在GPU环境的Linux系统上，使用源码编译方式快速安装MindSpore。下面以Ubuntu 18.04为例说明MindSpore编译安装步骤。\\n', '\\n', '- 如果您想在一个全新的带有GPU的Ubuntu 18.04上配置一个可以编译MindSpore的环境，可以使用[自动安装脚本](https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-gpu-source.sh)进行一键式配置，参见[环境准备-自动，推荐](#环境准备-自动推荐)小节。自动安装脚本会安装编译MindSpore所需的依赖。\\n', '\\n', '- 如果您的系统已经安装了部分依赖，如CUDA，Python，GCC等，则推荐参照[环境准备-手动](#环境准备-手动)小节的安装步骤手动安装。\\n', '\\n', '## 环境准备-自动 推荐\\n', '\\n', '在使用自动安装脚本之前，需要确保系统正确安装了NVIDIA GPU驱动。CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。执行以下指令检查驱动版本。\\n', '\\n', '```bash\\n', 'nvidia-smi\\n', '```\\n', '\\n', '如果未安装GPU驱动，执行如下命令安装。\\n', '\\n', '```bash\\n', 'sudo apt-get update\\n', 'sudo apt-get install ubuntu-drivers-common\\n', 'sudo ubuntu-drivers autoinstall\\n', '```\\n', '\\n', '安装完成后请重启系统。\\n', '\\n', '自动安装脚本需要更改软件源配置以及通过APT安装依赖，所以需要申请root权限。使用以下命令获取自动安装脚本并执行。通过自动安装脚本配置的环境，仅支持编译MindSpore>=1.6.0。\\n', '\\n', '```bash\\n', 'wget https://gitee.com/mindspore/mindspore/raw/r1.7/scripts/install/ubuntu-gpu-source.sh\\n', '# 默认安装Python 3.7，CUDA 11.1\\n', 'bash -i ./ubuntu-gpu-source.sh\\n', '# 如需指定安装Python 3.9和CUDA 10.1，并且安装可选依赖Open MPI，使用以下方式\\n', '# PYTHON_VERSION=3.9 CUDA_VERSION=10.1 OPENMPI=on bash -i ./ubuntu-gpu-source.sh\\n', '```\\n', '\\n', '该脚本会执行以下操作：\\n', '\\n', '- 更改软件源配置为华为云源。\\n', '- 安装MindSpore所需的编译依赖，如GCC，CMake等。\\n', '- 通过APT安装Python3和pip3，并设为默认。\\n', '- 下载CUDA和cuDNN并安装。\\n', '- 如果OPENMPI设置为`on`，则安装Open MPI。\\n', '- 如果LLVM设置为`on`，则安装LLVM。\\n', '\\n', '自动安装脚本执行完成后，需要重新打开终端窗口以使环境变量生效，然后跳转到[从代码仓下载源码](#从代码仓下载源码)小节下载编译MindSpore。\\n', '\\n', '更多的用法请参看脚本头部的说明。\\n', '\\n', '## 环境准备-手动\\n', '\\n', '下表列出了编译安装MindSpore GPU所需的系统环境和第三方依赖。\\n', '\\n', '|软件名称|版本|作用|\\n', '|-|-|-|\\n', '|Ubuntu|18.04|编译和运行MindSpore的操作系统|\\n', '|[CUDA](#安装cuda)|10.1或11.1|MindSpore GPU使用的并行计算架构|\\n', '|[cuDNN](#安装cudnn)|7.6.x或8.0.x|MindSpore GPU使用的深度神经网络加速库|\\n', '|[Python](#安装python)|3.7-3.9|MindSpore的使用依赖Python环境|\\n', '|[wheel](#安装wheel和setuptools)|0.32.0及以上|MindSpore使用的Python打包工具|\\n', '|[setuptools](#安装wheel和setuptools)|44.0及以上|MindSpore使用的Python包管理工具|\\n', '|[GCC](#安装gcc-git等依赖)|7.3.0到9.4.0之间|用于编译MindSpore的C++编译器|\\n', '|[git](#安装gcc-git等依赖)|-|MindSpore使用的源代码管理工具|\\n', '|[CMake](#安装cmake)|3.18.3及以上|编译构建MindSpore的工具|\\n', '|[Autoconf](#安装gcc-git等依赖)|2.69及以上版本|编译构建MindSpore的工具|\\n', '|[Libtool](#安装gcc-git等依赖)|2.4.6-29.fc30及以上版本|编译构建MindSpore的工具|\\n', '|[Automake](#安装gcc-git等依赖)|1.15.1及以上版本|编译构建MindSpore的工具|\\n', '|[gmp](#安装gcc-git等依赖)|6.1.2|MindSpore使用的多精度算术库|\\n', '|[Flex](#安装gcc-git等依赖)|2.5.35及以上版本|MindSpore使用的词法分析器|\\n', '|[tclsh](#安装gcc-git等依赖)|-|MindSpore sqlite编译依赖|\\n', '|[patch](#安装gcc-git等依赖)|2.5及以上|MindSpore使用的源代码补丁工具|\\n', '|[NUMA](#安装gcc-git等依赖)|2.0.11及以上|MindSpore使用的非一致性内存访问库|\\n', '|[Open MPI](#安装open-mpi-可选)|4.0.3|MindSpore使用的高性能消息传递库（可选，单机多卡/多机多卡训练需要）|\\n', '|[LLVM](#安装llvm-可选)|12.0.1|MindSpore使用的编译器框架（可选，图算融合以及稀疏计算需要）|\\n', '|[TensorRT](#安装tensorrt-可选)|7.2.2|MindSpore使用的高性能深度学习推理SDK（可选，Serving推理需要）|\\n', '\\n', '下面给出第三方依赖的安装方法。\\n', '\\n', '### 安装CUDA\\n', '\\n', 'MindSpore GPU支持CUDA 10.1和CUDA 11.1。NVIDIA官方给出了多种安装方式和安装指导，详情可查看[CUDA下载页面](https://developer.nvidia.com/cuda-toolkit-archive)和[CUDA安装指南](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)。\\n', '下面仅给出Linux系统使用runfile方式安装的指导。\\n', '\\n', '在安装CUDA前需要先安装相关依赖，执行以下命令。\\n', '\\n', '```bash\\n', 'sudo apt-get install linux-headers-$(uname -r) gcc-7\\n', '```\\n', '\\n', 'CUDA 10.1要求最低显卡驱动版本为418.39；CUDA 11.1要求最低显卡驱动版本为450.80.02。可以执行`nvidia-smi`指令确认显卡驱动版本。如果驱动版本不满足要求，CUDA安装过程中可以选择同时安装驱动，安装驱动后需要重启系统。\\n', '\\n', '使用以下命令安装CUDA 11.1（推荐）。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_455.32.00_linux.run\\n', 'sudo sh cuda_11.1.1_455.32.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-11.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '或者使用以下命令安装CUDA 10.1。\\n', '\\n', '```bash\\n', 'wget https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run\\n', 'sudo sh cuda_10.1.243_418.87.00_linux.run\\n', 'echo -e \"export PATH=/usr/local/cuda-10.1/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', '```\\n', '\\n', '### 安装cuDNN\\n', '\\n', '完成CUDA的安装后，在[cuDNN页面](https://developer.nvidia.com/zh-cn/cudnn)登录并下载对应的cuDNN安装包。如果之前安装了CUDA 10.1，下载配套CUDA 10.1的cuDNN v7.6.x；如果之前安装了CUDA 11.1，下载配套CUDA 11.1的cuDNN v8.0.x。注意下载后缀名为tgz的压缩包。假设下载的cuDNN包名为`cudnn.tgz`，安装的CUDA版本为11.1，执行以下命令安装cuDNN。\\n', '\\n', '```bash\\n', 'tar -zxvf cudnn.tgz\\n', 'sudo cp cuda/include/cudnn.h /usr/local/cuda-11.1/include\\n', 'sudo cp cuda/lib64/libcudnn* /usr/local/cuda-11.1/lib64\\n', 'sudo chmod a+r /usr/local/cuda-11.1/include/cudnn.h /usr/local/cuda-11.1/lib64/libcudnn*\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '### 安装Python\\n', '\\n', '[Python](https://www.python.org/)可通过多种方式进行安装。\\n', '\\n', '- 通过Conda安装Python。\\n', '\\n', '    安装Miniconda：\\n', '\\n', '    ```bash\\n', '    cd /tmp\\n', '    curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh\\n', '    bash Miniconda3-py37_4.10.3-Linux-x86_64.sh -b\\n', '    cd -\\n', '    . ~/miniconda3/etc/profile.d/conda.sh\\n', '    conda init bash\\n', '    ```\\n', '\\n', '    安装完成后，可以为Conda设置清华源加速下载，参考[此处](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)。\\n', '\\n', '    创建虚拟环境，以Python 3.7.5为例：\\n', '\\n', '    ```bash\\n', '    conda create -n mindspore_py37 python=3.7.5 -y\\n', '    conda activate mindspore_py37\\n', '    ```\\n', '\\n', '- 通过APT安装Python，命令如下。\\n', '\\n', '    ```bash\\n', '    sudo apt-get update\\n', '    sudo apt-get install software-properties-common -y\\n', '    sudo add-apt-repository ppa:deadsnakes/ppa -y\\n', '    sudo apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y\\n', '    # 将新安装的Python设为默认\\n', '    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100\\n', '    # 安装pip\\n', '    python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple\\n', '    sudo update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100\\n', '    pip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple\\n', '    ```\\n', '\\n', '    若要安装其他Python版本，只需更改命令中的`3.7`。\\n', '\\n', '可以通过以下命令查看Python版本。\\n', '\\n', '```bash\\n', 'python --version\\n', '```\\n', '\\n', '### 安装wheel和setuptools\\n', '\\n', '在安装完成Python后，使用以下命令安装。\\n', '\\n', '```bash\\n', 'pip install wheel\\n', 'pip install -U setuptools\\n', '```\\n', '\\n', '### 安装GCC git等依赖\\n', '\\n', '可以通过以下命令安装GCC，git，Autoconf，Libtool，Automake，gmp，Flex，tclsh，patch，NUMA。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-7 git automake autoconf libtool libgmp-dev tcl patch libnuma-dev flex -y\\n', '```\\n', '\\n', '如果要安装更高版本的GCC，使用以下命令安装GCC 8。\\n', '\\n', '```bash\\n', 'sudo apt-get install gcc-8 -y\\n', '```\\n', '\\n', '或者安装GCC 9（注意，GCC 9不兼容CUDA 10.1）。\\n', '\\n', '```bash\\n', 'sudo apt-get install software-properties-common -y\\n', 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test\\n', 'sudo apt-get update\\n', 'sudo apt-get install gcc-9 -y\\n', '```\\n', '\\n', '### 安装CMake\\n', '\\n', '可以通过以下命令安装[CMake](https://cmake.org/)。\\n', '\\n', '```bash\\n', 'wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\\n', 'sudo apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\"\\n', 'sudo apt-get install cmake -y\\n', '```\\n', '\\n', '### 安装Open MPI-可选\\n', '\\n', '可以通过以下命令编译安装[Open MPI](https://www.open-mpi.org/)。\\n', '\\n', '```bash\\n', 'curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz\\n', 'tar xzf openmpi-4.0.3.tar.gz\\n', 'cd openmpi-4.0.3\\n', './configure --prefix=/usr/local/openmpi-4.0.3\\n', 'make\\n', 'sudo make install\\n', 'echo -e \"export PATH=/usr/local/openmpi-4.0.3/bin:\\\\$PATH\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=/usr/local/openmpi-4.0.3/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '### 安装LLVM-可选\\n', '\\n', '可以通过以下命令安装[LLVM](https://llvm.org/)。\\n', '\\n', '```bash\\n', 'wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\\n', 'sudo add-apt-repository \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main\"\\n', 'sudo apt-get update\\n', 'sudo apt-get install llvm-12-dev -y\\n', '```\\n', '\\n', '### 安装TensorRT-可选\\n', '\\n', '完成CUDA和cuDNN的安装后，在[TensorRT下载页面](https://developer.nvidia.com/nvidia-tensorrt-7x-download)下载配套CUDA 11.1的TensorRT 7.2.2，注意选择下载TAR格式的安装包。假设下载的文件名为`TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz`。使用以下命令安装TensorRT。\\n', '\\n', '```bash\\n', 'tar xzf TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz\\n', 'cd TensorRT-7.2.2.3\\n', 'echo -e \"export TENSORRT_HOME=$PWD\" >> ~/.bashrc\\n', 'echo -e \"export LD_LIBRARY_PATH=\\\\$TENSORRT_HOME/lib:\\\\$LD_LIBRARY_PATH\" >> ~/.bashrc\\n', 'source ~/.bashrc\\n', 'cd -\\n', '```\\n', '\\n', '## 从代码仓下载源码\\n', '\\n', '```bash\\n', 'git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '## 编译MindSpore\\n', '\\n', '执行编译前，请确保nvcc的安装路径已经添加到`PATH`与`LD_LIBRARY_PATH`环境变量中，如果没有添加，以安装在默认路径的CUDA11为例，可以执行如下操作：\\n', '\\n', '```bash\\n', 'export PATH=/usr/local/cuda-11.1/bin:$PATH\\n', 'export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH\\n', '```\\n', '\\n', '如果之前安装了其他CUDA版本或者CUDA安装路径不同，只需替换上述命令中的`/usr/local/cuda-11.1`为当前安装的CUDA路径。\\n', '\\n', '进入MindSpore根目录，然后执行编译脚本。\\n', '\\n', '```bash\\n', 'cd mindspore\\n', 'bash build.sh -e gpu -S on\\n', '```\\n', '\\n', '其中：\\n', '\\n', '- `build.sh`中默认的编译线程数为8，如果编译机性能较差可能会出现编译错误，可在执行中增加-j{线程数}来减少线程数量。如`bash build.sh -e gpu -j4`。\\n', '- 默认从github下载依赖源码，当-S选项设置为`on`时，从对应的gitee镜像下载。\\n', '- 关于`build.sh`更多用法请参看脚本头部的说明。\\n', '\\n', '## 安装MindSpore\\n', '\\n', '```bash\\n', 'pip install output/mindspore_gpu-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '在联网状态下，安装MindSpore时会自动下载MindSpore安装包的依赖项（依赖项详情参见[setup.py](https://gitee.com/mindspore/mindspore/blob/r1.7/setup.py)中的required_package），其余情况需自行安装。运行模型时，需要根据[ModelZoo](https://gitee.com/mindspore/models/tree/r1.7/)中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考[requirements.txt](https://gitee.com/mindspore/mindspore/blob/r1.7/requirements.txt)。\\n', '\\n', '## 验证是否成功安装\\n', '\\n', '方法一：\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'MindSpore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '方法二：\\n', '\\n', '```python\\n', 'import numpy as np\\n', 'from mindspore import Tensor\\n', 'import mindspore.ops as ops\\n', 'import mindspore.context as context\\n', '\\n', 'context.set_context(device_target=\"GPU\")\\n', 'x = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'y = Tensor(np.ones([1,3,3,4]).astype(np.float32))\\n', 'print(ops.add(x, y))\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', '[[[[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]\\n', '\\n', '  [[2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]\\n', '   [2. 2. 2. 2.]]]]\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n', '\\n', '## 升级MindSpore版本\\n', '\\n', '当需要升级MindSpore版本时，可执行如下命令：\\n', '\\n', '- 直接在线升级\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore-gpu\\n', '    ```\\n', '\\n', '    注意：1.3.0及以上版本升级时，默认选择CUDA11版本，若仍希望使用CUDA10版本，请选择相应的完整wheel安装包。\\n', '\\n', '- 本地源码编译升级\\n', '\\n', '    在源码根目录下执行编译脚本`build.sh`成功后，在`output`目录下找到编译生成的whl安装包，然后执行命令进行升级。\\n', '\\n', '    ```bash\\n', '    pip install --upgrade mindspore_gpu-*.whl\\n', '    ```\\n']"}
{"index": {"_index": "r1.7", "_id": "third_party_cpu_install.md"}}
{"file_link": "https://gitee.com/mindspore/docs/blob/r1.7/install/third_party/third_party_cpu_install.md", "text_entry": "['# 源码编译方式安装MindSpore CPU版本（含第三方依赖）\\n', '\\n', '作者：[damon0626](https://gitee.com/damon0626)\\n', '\\n', '本文档介绍如何在```Ubuntu 18.04 64```位操作系统```CPU```环境下，使用源码编译方式安装```MindSpore```。\\n', '\\n', '## 确认系统环境信息\\n', '\\n', '### 1. 确认安装Ubuntu 18.04是64位操作系统\\n', '\\n', '（1）确认系统版本号，在终端输入```lsb_release -a```\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ lsb_release -a\\n', 'No LSB modules are available.\\n', 'Distributor ID:Ubuntu\\n', 'Description:Ubuntu 18.04.5 LTS\\n', 'Release:18.04\\n', 'Codename:bionic\\n', '```\\n', '\\n', '（2）确认系统位数，在终端输入```uname -a```\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ uname -a\\n', 'Linux mssd 5.4.0-42-generic #46~18.04.1-Ubuntu SMP Fri Jul 10 07:21:24 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\\n', '```\\n', '\\n', '### 2. 确认安装GCC 7.3.0版本\\n', '\\n', '（1）确认当前系统安装的GCC版本\\n', '\\n', '在终端输入```gcc --version```，系统已安装版本为7.5.0\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/gcc-7.3.0/build$ gcc --version\\n', 'gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\\n', 'Copyright (C) 2017 Free Software Foundation, Inc.\\n', 'This is free software; see the source for copying conditions.  \\n', 'There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n', '```\\n', '\\n', '（2）如果提示找不到gcc命令，用以下方式安装\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ sudo apt-get install gcc\\n', '```\\n', '\\n', '（3）本地编译安装7.3.0，下载文件\\n', '\\n', '[点此下载GCC7.3.0](https://ftp.gnu.org/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz)\\n', '\\n', '（4）解压并进入目录\\n', '\\n', '```bash\\n', 'tar -xvzf gcc-7.3.0.tar.gz\\n', 'cd gcc-7.3.0\\n', '```\\n', '\\n', '（5）运行```download_prerequesites```，运行该文件的目的是\\n', '\\n', '> 1. Download some prerequisites needed by gcc.\\n', '> 2. Run this from the top level of the gcc source tree and the gcc build will do the right thing.\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/gcc-7.3.0$ ./contrib/download_prerequisites\\n', '2020-12-19 09:58:33 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 [2383840] -> \"./gmp-6.1.0.tar.bz2\" [1]\\n', '2020-12-19 10:00:01 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 [1279284] -> \"./mpfr-3.1.4.tar.bz2\" [1]\\n', '2020-12-19 10:00:50 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz [669925] -> \"./mpc-1.0.3.tar.gz\" [1]\\n', '2020-12-19 10:03:10 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2 [1626446] -> \"./isl-0.16.1.tar.bz2\" [1]\\n', 'gmp-6.1.0.tar.bz2: 成功\\n', 'mpfr-3.1.4.tar.bz2: 成功\\n', 'mpc-1.0.3.tar.gz: 成功\\n', 'isl-0.16.1.tar.bz2: 成功\\n', 'All prerequisites downloaded successfully.\\n', '```\\n', '\\n', '（6）运行成功后，进行配置\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/gcc-7.3.0/build$ ../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\\n', '```\\n', '\\n', '> 参数解释：  \\n', '> –enable-checking=release  增加一些检查  \\n', '> –enable-languages=c,c++ 需要gcc支持的编程语言  \\n', '> –disable-multilib 取消多目标库编译(取消32位库编译)  \\n', '\\n', '（7）编译，根据CPU性能，选择合适的线程数\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/gcc-7.3.0/build$ make -j 6\\n', '```\\n', '\\n', '（8）安装\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ sudo make install -j 6\\n', '```\\n', '\\n', '（9）验证，看到版本已经变更为7.3.0，安装成功。\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ gcc --version\\n', 'gcc (GCC) 7.3.0\\n', 'Copyright © 2017 Free Software Foundation, Inc.\\n', 'This is free software; see the source for copying conditions.  \\n', 'There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n', '```\\n', '\\n', '### 3. 确认安装Python 3.7.5版本\\n', '\\n', '**注意:** ```Ubuntu 18.04``` 系统自带的 ```Python3```版本为```Python3.6.9```，系统自带```Python```不要删除，防止依赖错误。```Linux```发行版中, ```Debian```系的提供了```update-alternatives```工具，用于在多个同功能的软件，或软件的多个不同版本间选择，这里采用```update-alternatives```工具控制多个Python版本。\\n', '\\n', '（1）查看系统Python版本\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ python3 --version\\n', 'Python3.6.9\\n', '```\\n', '\\n', '（2）[点此下载Python 3.7.5安装包](https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz)\\n', '\\n', '（3）解压并进入目录\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ tar -xvzf Python-3.7.5.tgz\\n', 'ms-sd@mssd:~$ cd Python-3.7.5/\\n', '```\\n', '\\n', '（4）配置文件路径\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ ./configure --prefix=/usr/local/python3.7.5 --with-ssl\\n', '```\\n', '\\n', '> 参数解释：  \\n', '> --prefix=/usr/local/python3.7.5  \\n', '> 可执行文件放在/usr/local/python3.7.5/bin下，  \\n', '> 库文件放在/usr/local/python3.7.5/lib，  \\n', '> 配置文件放在/usr/local/python3.7.1/include，  \\n', '> 其他资源文件放在/usr/local/python3.7.5下  \\n', '>  \\n', '> --with-ssl：确保pip安装库时能找到SSL\\n', '\\n', '（5）安装必要的依赖\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl --no-check-certificate\\n', '```\\n', '\\n', '（6）编译安装\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ make -j 6\\n', 'ms-sd@mssd:~/Python-3.7.5$ sudo make install -j 6\\n', '```\\n', '\\n', '（7）查看当前系统python/python3的指向\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ ls -l /usr/bin/ | grep python\\n', 'lrwxrwxrwx 1 root root          23 10月  8 20:12 pdb3.6 -> ../lib/python3.6/pdb.py\\n', 'lrwxrwxrwx 1 root root          31 12月 18 21:44 py3versions -> ../share/python3/py3versions.py\\n', 'lrwxrwxrwx 1 root root           9 12月 18 21:44 python3 -> python3.6\\n', '-rwxr-xr-x 2 root root     4526456 10月  8 20:12 python3.6\\n', '-rwxr-xr-x 2 root root     4526456 10月  8 20:12 python3.6m\\n', 'lrwxrwxrwx 1 root root          10 12月 18 21:44 python3m -> python3.6m（）\\n', '```\\n', '\\n', '（8）备份原来的python3链接，重新建立新的python3指向以更改python3默认指向\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ sudo mv /usr/bin/python3 /usr/bin/python3.bak\\n', 'ms-sd@mssd:~/Python-3.7.5$ sudo ln -s /usr/local/python3.7.5/bin/python3.7 /usr/bin/python3\\n', '```\\n', '\\n', '（9）重新建立pip3指向\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ sudo ln -s /usr/local/python3.7.5/bin/pip3 /usr/bin/pip3\\n', '```\\n', '\\n', '（10）输入验证，Python已更改为3.7.5版本\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ python3\\n', 'Python 3.7.5 (default, Dec 19 2020, 11:29:09)\\n', '[GCC 7.3.0] on linux\\n', 'Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\\n', '>>>\\n', '```\\n', '\\n', '（11）更新```update-alternatives```python列表\\n', '\\n', '```bash\\n', 'sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100\\n', 'sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150\\n', 'sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 110\\n', '```\\n', '\\n', '（12）设置Python默认选项，选择2，默认优先级最高的选项\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ sudo update-alternatives --config python\\n', 'There are 3 choices for the alternative python (providing /usr/bin/python).\\n', '\\n', '  Selection    Path                Priority   Status\\n', '------------------------------------------------------------\\n', '  0            /usr/bin/python3     150       auto mode\\n', '  1            /usr/bin/python2     100       manual mode\\n', '* 2            /usr/bin/python3     150       manual mode\\n', '  3            /usr/bin/python3.6   110       manual mode\\n', '\\n', 'Press <enter> to keep the current choice[*], or type selection number:\\n', '```\\n', '\\n', '### 4. 确认安装OpenSSL 1.1.1及以上版本\\n', '\\n', '（1）Ubuntu 18.04自带了OpenSSL 1.1.1\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/Python-3.7.5$ openssl version\\n', 'OpenSSL 1.1.1  11 Sep 2018\\n', '```\\n', '\\n', '（2）本地编译安装请参考[Ubuntu 18.04 安装新版本openssl](https://www.cnblogs.com/thechosenone95/p/10603110.html)\\n', '\\n', '### 5. 确认安装CMake 3.18.3及以上版本\\n', '\\n', '（1）[点此下载CMake 3.18.5](https://github.com/Kitware/CMake/releases/download/v3.18.5/cmake-3.18.5.tar.gz)\\n', '\\n', '（2）解压并进入文件目录\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ tar -zxvf cmake-3.18.5.tar.gz\\n', 'ms-sd@mssd:~$ cd cmake-3.18.5/\\n', '```\\n', '\\n', '（3）编译安装\\n', '\\n', '在源码的README.rst中看到如下文字：\\n', '\\n', '> For example, if you simply want to build and install CMake from source,\\n', '> you can build directly in the source tree::\\n', '>\\n', '> $ ./bootstrap && make && sudo make install\\n', '>\\n', '> Or, if you plan to develop CMake or otherwise run the test suite, create\\n', '> a separate build tree::\\n', '>\\n', '> $.mkdir cmake-build && cd cmake-build\\n', '>\\n', '> $./cmake-source/bootsrap && make\\n', '\\n', '选择从源码编译安装，根据提示在终端依次输入以下命令：\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/cmake-3.18.5$ ./bootstrap\\n', 'ms-sd@mssd:~/cmake-3.18.5$ make -j 6\\n', 'ms-sd@mssd:~/cmake-3.18.5$ sudo make install -j 6\\n', '```\\n', '\\n', '（4）验证，安装成功\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ cmake --version\\n', 'cmake version 3.18.5\\n', '\\n', 'CMake suite maintained and supported by Kitware (kitware.com/cmake).\\n', '```\\n', '\\n', '### 6. 确认安装wheel 0.32.0及以上版本\\n', '\\n', '（1）更新pip源\\n', '\\n', '修改 ~/.pip/pip.conf (如果没有该文件，创建一个)， 内容如下：\\n', '\\n', '```bash\\n', '[global]\\n', 'index-url = https://pypi.tuna.tsinghua.edu.cn/simple\\n', '```\\n', '\\n', '（2）安装wheel 0.32.0\\n', '\\n', '```shel\\n', 'ms-sd@mssd:~$ sudo pip3 install wheel==0.32.0\\n', '```\\n', '\\n', '（3）查看安装情况\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ pip3 list\\n', 'Package    Version\\n', '---------- -------\\n', 'numpy      1.19.4\\n', 'pip        20.3.3\\n', 'setuptools 41.2.0\\n', 'wheel      0.32.0\\n', '```\\n', '\\n', '### 7. 确认安装patch 2.5及以上版本\\n', '\\n', '（1）查看patch版本，ubuntu18.04自带了2.7.6版本\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ patch --version\\n', 'GNU patch 2.7.6\\n', 'Copyright (C) 2003, 2009-2012 Free Software Foundation, Inc.\\n', 'Copyright (C) 1988 Larry Wall\\n', '\\n', 'License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n', 'This is free software: you are free to change and redistribute it.\\n', 'There is NO WARRANTY, to the extent permitted by law.\\n', '\\n', 'Written by Larry Wall and Paul Eggert\\n', '```\\n', '\\n', '### 8. 确认安装NUMA 2.0.11及以上版本\\n', '\\n', '（1）如果未安装，使用如下命令下载安装：\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ apt-get install libnuma-dev\\n', '```\\n', '\\n', '### 9. 确认安装git工具\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ sudo apt-get install git\\n', '```\\n', '\\n', '## MindSpore源码安装\\n', '\\n', '### 10. 下载MindSpore源码\\n', '\\n', '（1）从代码仓库下载源码\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ git clone https://gitee.com/mindspore/mindspore.git -b r1.7\\n', '```\\n', '\\n', '（2）安装依赖（根据编译过程中报错，整理如下）\\n', '\\n', '```text\\n', 'ms-sd@mssd:~$ sudo apt-get install python3.7-dev pybind11  python3-wheel python3-setuptools python3.7-minimal\\n', '```\\n', '\\n', '（3）编译（内存占用太大，总是超内存线程被杀死，建议4G以上）\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/mindspore$ sudo bash build.sh -e cpu -j 2\\n', '```\\n', '\\n', '（4）编译成功\\n', '\\n', '大约需要1小时，编译成功，出现如下提示：\\n', '\\n', '```text\\n', 'CPack: - package: /home/ms-sd/mindspore/build/mindspore/mindspore generated.\\n', 'success building mindspore project!\\n', '---------------- mindspore: build end   ----------------\\n', '```\\n', '\\n', '同时在```/mindspore/output/```文件夹下生成了```mindspore-1.1.0-cp37-cp37m-linux_x86_64.whl```文件。\\n', '\\n', '（5）pip3安装MindSpore安装文件\\n', '\\n', '```text\\n', 'ms-sd@mssd:~/mindspore$ sudo pip3 install /mindspore/output/mindspore-1.1.0-cp37-cp37m-linux_x86_64.whl\\n', '```\\n', '\\n', '（6）验证安装是否成功\\n', '\\n', '```bash\\n', 'python -c \"import mindspore;mindspore.run_check()\"\\n', '```\\n', '\\n', '如果输出：\\n', '\\n', '```text\\n', 'mindspore version: 版本号\\n', 'The result of multiplication calculation is correct, MindSpore has been installed successfully!\\n', '```\\n', '\\n', '说明MindSpore安装成功了。\\n']"}
