在性能分析和问题定位中，常常需要对IO进行统计分析和单IO追踪分析，
传统的手段：
1）采用blktrace手段跟踪每个IO处于各个阶段的时间戳和进程等信息；
2）采用trace的方式跟踪内核态指定函数。
这两种方案存在的问题：
1）效率低对性能影响很大；
2）通过文件输出方式中间结果，1秒监控结果就可能有几十兆甚至几百兆的大小，跟踪时长有限，解析难度大；
3）结果可视化效果不好；
eBPF是一种可以在 Linux 内核中运行用户编写的程序，而不需要修改内核代码或加载内核模块的技术。简单说，eBPF让 Linux 内核变得可编程化了。eBPF程序是一个事件驱动模型。Linux内核提供了各种hook point，比如system calls, function entry/exit, kernel tracepoints, network events 等。eBPF程序通过实现想要关注的hook point 的 callback，并把这些 callback 注册到相应的 hook point 来完成“内核编程”[1]。所以基于ebpf可以实现高效地对IO栈各个阶段进行数据统计，并将统计后的数据进行可视化展示。并且能够实现在pid|时间|设备|IO|文件等维度上给出相关性分析结果。
该项目包含的特性总结如下：
1.统计单个IO从文件到落盘各个阶段的事件、时间戳、pid、io类型等信息；
2.支持对连续统计数据进行本地化保存，并支持对本地化保存数据的加载和可视化展示。
3.数据在各个pid|时间|设备|IO|文件等维度上给出统计结果，并支持相关性分析结果；

1、实现对所有设备或指定设备的IO各个阶段耗时统计，并可以给出可视化统计结果；
2、支持导出数据并提供工具进行线下分析；

1.熟悉ebpf机制；
2.熟悉内核IO栈；