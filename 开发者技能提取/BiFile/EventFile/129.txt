SOFARegistry的客户端目前采用长连接与其中一台 Session 相连，随后会用这根链接注册和订阅服务，在注册中心进行运维期间，客户端会断链重连到别的机器上，经过一轮滚动升级，就会造成 Session 上链接分布的不均衡，一是数据不均衡，二是推送压力不均衡，严重的时候会造成单机热点，影响推送的效率。

由于长连接快速检测节点宕机的机制，主动断链会造成节点数据下线，因此客户端链接的稳定性也是一个很重要的考虑。

对服务发现来说，发布和订阅对链接稳定性的要求不同：
- 对发布，链接断开会造成服务数据下线
- 对订阅，会造成轻微的数据推送延迟，延迟时间通常是重连间隔

可以考虑以下方案解决此问题

一致性 hash 主动重连

由于发布和订阅对链接稳定性的要求不一样，发布更加要求稳定，而订阅会服务端压力影响更大
- 发布和订阅独立两根链接
- 发布依然保持目前的连上后就不会主动断开
- 订阅采用一致性hash的方式寻址自己应该连到的节点，当注册中心自身节点列表发生变化的时候计算出新的节点，确认是否重连到新session上
- 需要考虑大规模重连对注册中心自身的影响，比如添加随机延迟进行重连
- 订阅可以带上内存中数据的版本号发送给新的Session，Session进行数据版本对比，避免没有必要的数据推送

实现自动均衡的客户端和服务端的设计方案文档
实现自动均衡的客户端和服务端的Pull Request

熟悉Java
了解注册中心与服务发现