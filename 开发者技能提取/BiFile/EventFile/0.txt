一个端口支持多种协议可以使部署和运维更为方便，甚至在一些特殊的开发场景也能降低复杂度。
1、对于协议切换/架构升级的场景，通常需要同时暴露多个协议，单端口多协议能最大程度上带来运维的便捷性。
2、从后端开发的角度一套业务代码加少许配置就能暴露多个端口也能带来降低开发成本 目前 Dubbo 支持一个应用对外发布多种 RPC 协议，但这些 RPC 协议都需要独立占用一个服务端端口，另外 Dubbo QoS 也同样占用了一个端口。维护这些端口的监听需要消耗一定的资源，同时暴露多端口对于运维也存在一定复杂度，如 VIP /域名等。因此可以通过在同一个端口支持多种复用协议来降低复杂度，提高易用性
例如：一个业务逻辑需要提供给不同语言、不同业务方进行调用。 
当前大多数 rpc 框架均不支持该逻辑（包括 Dubbo）以 Dubbo 举例，使用Triple 协议并开启所有默认服务，会开启如下默认端口 Triple: 50051、Metadata : 20880、Qos: 22222。如果后续增加其他功能可能还会更多，这很不优雅，并且还启动了多个 Netty Server，造成了资源浪费。 如果本地需要测试，在不修改配置的情况下端口会冲突导致启动失败，体验很差。 

实现服务端同端口多协议暴露,将各种协议服务使用一种统一的方式使用同一个 Netty Server 进行暴露
将Qos 协议和 Triple 协议使用同一个端口暴露
将 Dubbo 的其他协议进行接入

熟练使用 Java
了解基础网络通信原理
了解Netty工作原理