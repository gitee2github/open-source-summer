Vineyard是一个分布式数据管理引擎，Vineyard依赖元数据服务来实现在多个节点之前的同步状态（例如数据在多个节点上如何分布，等等），并为上层的应用程序提供一个分布式数据对象的全局视图。当前Vineyard依赖etcd作为元数据服务的后端，etcd为vineyard的元数据服务提供了高可用性和强一致性。但是很多时候，在一些对强一致性要求没有那么高，并且部署一个多副本的etcd集群并不是很容易的情况下，其他的一些例如redis的键值存储引擎是一个常用的典型方案。

在这个任务中，候选人负责实现Vineyard元数据服务队更多后端存储引擎的支持。元数据服务设计到的操作包括get、put、list、delete，以及建立一个流来持续的订阅后段存储引擎上的来自集群中其他Vineyard节点对metadata的更新，并使得这些更新在当前节点上以一个正确的顺序生效。

候选人首先需要完成一个上手任务来熟悉Vineyard中的元数据服务
候选人需要在已有的一个相对可扩展的接口上实现至少对redis和kine的支持

候选人需要熟悉C++编程
候选人最好有一些分布式编程方面的基础，并且最好熟悉etcd和redis