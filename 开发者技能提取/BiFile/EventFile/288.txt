Vineyard是一个针对大数据分析工作流设计的内存数据管理引擎，管理着分布式在多个节点的分布式数据集（矩阵、表、图等），实现了跨计算引擎的零拷贝共享。在一些实际案例中，整个工作流涉及到的数据量可能会超过集群机器物理内存的大小，同时一部分数据并不是总是被用到，可以被交换到磁盘中（或者诸如OSS、S3这样的远程对象存储中），来暂时释放被占用的内存，并且这些数据在之后被用到的时候可以从磁盘（或远程对象存储）中重新加载回来。这样的机制成为“Spill”。

在这个任务中，候选人负责在Vineyard中实现如上描述的Spill的机制。候选人需要与mentor一起协作设计一个算法，来选择一些合适的Object作为Spill的对象，举个例子，Spill是不能将此时上层应用程序正在使用的数据也从内存中驱逐。基于如上描述的Spill机制的实现，候选人需要进一步在Vineyard中实现Checkpoint机制，Checkpoint会将某一个时刻整个Vineyard中的所有对象都导出到磁盘或者远程存储，这些导出的结果能够在之后被用来恢复Vineyard的状态。Checkpoint机制也是实现系统容错的基础之一。

在Vineyard中实现Spill的支持，需要支持Spill到本地盘，并且设计一个一致的、可扩展的接口，来支持Spill到本地盘或者远程对象存储
复用实现Spill过程中的一些功能，实现对Checkpoint的支持

候选人需要熟悉C++编程
候选人最好有一些关于分布式计算相关的经验