WebAssembly(Wasm) 是近几年从 Web 领域诞生并快速出圈的一项虚拟机指令格式，是一种可移植的、语言无关并兼容 Web 的全新格式，支持在浏览器和非 Web 环境运行不同语言编写的应用程序。MOSN 是一款主要使用 Go 语言开发的网络代理 (类似 Envoy、Nginx)，融合了大量云原生通用插件，为服务提供了多协议、模块化、智能化、安全的代理能力。如何为这些插件提供一个安全隔离的运行环境，甚至支持不同语言编写的插件，成为了一个非常具有挑战性的课题。Wasm 技术和 Proxy-Wasm 规范的诞生为解决上述问题提供了一种全新的思路。本题目将基于 MOSN 中已有的 Wasm 框架，适配开源社区专门为网络代理场景提出的 Proxy-Wasm v2 规范，使 MOSN 具备运行符合 v2 规范的 Wasm 插件的能力。

为 MOSN 适配社区 Proxy-Wasm v2 开源规范
具备运行符合 v2 规范的 Wasm 插件的能力
(可选) 支持 Wasm 发起异步 Http Call 等高级特性
总结整个开发流程和遇到的问题，并产生文档介绍 MOSN Wasm 框架的工作原理

熟练使用 Linux 操作系统
使用 Go 语言进行开发
具备对新兴技术的快速学习能力