ChaosBlade 已经实现了部分机器资源故障场景、应用服务故障场景、容器服务故障场景，现需要满足精细化控制能力，此项目包含三个故障场景实现，三个都需要完成：

场景一：CPU 场景精细化实现
chaosblade 目前 CPU burn 是跑死循环的实现，请提供一种 CPU burn 算法，如 PI、 CRC16、FFT 来丰富 cpu burn 的场景，满足精细化控制 CPU 使用的需求；

场景二：HTTP 请求相关故障注入
chaosblade 已经能够支持 Java 客户端的 http 请求相关的故障注入，但是其他应用语言无法支持，所以需要提供一种通过代理抓包的方式，通用的 HTTP 故障注入方式，满足对于 HTTP 服务消费侧和服务提供侧故障模拟，比如模拟响应码，注入延迟等故障。

场景三：文件系统访问延迟、读写失败
目前文件相关故障都是基于文件本身实现，比如删除文件、篡改文件等。现需要基于文件系统实现支持文件读写延迟与失败。

完成CPU负载精细化控制
完成 HTTP TCP 请求错误码、延迟故障注入
完成文件系统访问延迟、失败故障场景

使用 PI, CRC16, and FFT 等算法实现CPU负载模拟
使用TCP抓包拆包方式实现HTTP故障模拟
使用对文件系统进行操作模拟文件读写延迟、失败