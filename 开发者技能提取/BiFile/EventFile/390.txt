目前 IoTDB 表达式查询采用的是经典的火山模型。其计算过程大致为： 
对输入表达式进行语法解析，将表达式转换为内存表示结构表达式树 
将内存表示结构表达式树转换为有向无环图的计算结构 Transformer 
将数据读入计算结构 Transformer 进行计算 
这样操作的问题在于，使用类火山模型计算的计算结构 Transformer 在求表达式的值时容易会 
导致生成大量的调用堆栈、需要进行大量不必要的 type infer，有时还会导致出现重复的代码实现。 
例如，对根节点求下一个值需要调用根节点的 evaluate()，接着根节点会调用子节点的  
evaluate()，直到将 evaluate() 传递到叶节点。 
又例如，表达式树的一个节点是 a，由于不知道 a 的数据类型，读取 a 的值时我们需要对 
a.TSDataType 进行 switch 操作，后续对于 a 的每一个值，表达式树都需要对 a 的 
数据类型进行 switch，造成不必要的开销。 
本项目的目标是使用代码生成技术实现对表达式的高效计算。 
通过动态编译表达式，可以使得表达式的计算扁平化，减少表达式求值时的逐级调用和重复调用， 提高 IoTDB 分析语句的的执行效率。

需要使用代码生成技术实现对表达式的高效计算。使用代码生成技术实现 MPP 框架中 TransformOperator / ScanOperator / FilterOperator 等。

1. 调研对比文档。调研 Flink / Presto 等引擎的动态代码实现方法，通过比对设计原理和实测性能的方式，对比各个动态代码生成框架的优劣。
2. 设计文档。包括动态编译的实现方式，有哪些接口，如何调用。
3. 设计实现。动态编译替换现有 MPP 系统部分功能。
4. 性能报告。对比使用代码生成技术前后，各类查询的性能。
5. 测试。编写单元测试/集成测试，测试驱动保证代码正确性。
6. 编辑用户手册，提示模块用法。

熟练掌握Java编程，具有良好的编程习惯
了解Java代码生成的工具及基本原理，或具有较强的学习能力