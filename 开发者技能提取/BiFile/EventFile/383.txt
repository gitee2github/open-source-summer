目前 IoTDB 中原始的分组聚合查询 group by 语句仅支持根据时间序列数据的时间戳进行分组聚合查询。 
另外，IoTDB 中的用户自定义函数 UDF 目前仅支持了根据时间序列数据的时间戳以及固定点个数进行开窗处理来满足用户针对不同场景的需求。 
然而，在诸如 Flink 等系统，还允许用户使用会话窗口来处理数据。 
本项目旨在扩展 IoTDB 的原始 group by 查询与用户自定义函数 UDF 的聚合分组方式，希望支持如下 5 开窗分组种类： 
Time Window: 根据时间戳分组开窗。 
Count Window: 根据点数分组开窗，将连续的每 k 个数据点分为一组，每次向前滑动 n 个点位。 
Session Window: 根据会话时间段分组开窗。根据时间序列数据所表现出来的活动会话进行分组。例如工业场景下，设备并不总是连续运行，将设备每次接入会话所产生的数据作为一组来分组。 
State Window: 根据连续稳定值进行分组。时间序列数据在一段时间内如果保持在某个值的上下范围内浮动，在这个阈值内，将值大致相同的连续数据点归为一组。 
User-defined Window: 根据用户逻辑自定义开窗

1. 调研与需求文档。调研 Flink 等引擎的查询窗口切分定义以及实现方法。
2. 设计文档。包括 IoTDB group by语句, 用户自定义函数框架下的实现方式，有哪些接口，如何调用。
3. 设计实现。实现聚合查询窗口切分框架。实现 IoTDB 的 group by 语句的五种聚合查询方式。实现 IoTDB 的用户自定义函数 UDF 五种开窗方式。
4. 性能报告。对比使用代码生成技术前后，各类查询的性能。
5. 测试。编写单元测试/集成测试，测试驱动保证代码正确性。
6. 编辑用户手册，提示模块用法。

熟练掌握Java编程
了解数据库的基本知识