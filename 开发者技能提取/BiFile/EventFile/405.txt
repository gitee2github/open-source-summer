目前 IoTDB 支持基于 Java 开发实现的用户自定义函数（UDF）。用户在开发 UDF 时，需要遵循如下流程： 
在 Java 项目中引入 IoTDB 的依赖。 
遵循 IoTDB 定义的 UDF 接口进行开发。 
将 UDF 编译成 Jar 文件后，手动部署到 IoTDB 集群的各个实例中。 
通过 UDF 运维命令注册并加载 UDF。 
该流程虽然能基本满足 UDF 的开发与部署，但存在以下问题： 
首先，UDF 运行环境无法做到有效的安全隔离，恶意用户可以在 UDF 实现中通过调用系统函数对 IoTDB 服务甚至是操作系统本身进行攻击。 
其次，实际使用中，UDF 的开发部署流程较长，对于业务侧的用户，在开发完 UDF 之后，需要 DBA 协助将 Jar 文件手动部署到各个集群中。当后续集群出现扩容时，DBA 还需要将其他节点的 Jar 文件手动拷贝到新的节点。这类操作十分不利于在弹性环境下自动执行。 
本项目的目标是，利用其他轻量级的编程语言或者外部函数运行服务，实现可配置的轻量安全的 UDF 运行环境。

需要对现有的 UDF 功能与需求总结分析，并设计出函数运行环境的接口；通过调研其他脚本语言（如 JavaScript / Lua）在 Java 中的运行方案以及外部的函数运行环境（如 OpenFunction)，给出不同运行环境的实现以及性能对比。

1. 调研对比文档。调研 Java 中调脚本语言代码的方案，以及调用 OpenFunction 的方案，从运行性能、安全性、开发友好程度等维度和现有的 UDF 开发部署机制对比。
2.设计文档。
2.1 整体架构设计。
2.2 UDF 运行时接口设计。
2.3 UDF 管理 SQL 设计。
2.4 基于脚本语言 UDF 开发接口设计。
2.5 基于 OpenFunction 开发接口设计。
3. 功能实现。
3.1 UDF 运行时接口抽象。
3.2 UDF 管理功能扩展实现。
3.3 基于脚本语言 的 UDF 运行时实现。
3.4 基于外部运行时 OpenFunction 的 UDF 运行时实现。
4. 性能报告：通过常用的 UDF 查询场景，对比基于脚本语言、OpenFunction、和原有的 UDF 运行时的执行性能。
5. 测试。编写单元测试/集成测试，测试驱动保证代码正确性。
6.使用文档。
6.1 UDF 开发说明文档。
6.2 UDF 管理操作文档。

熟练掌握 Java 编程，掌握面向对象编程的设计思想，具有测试驱动编程的开发思维。
了解数据库的基本知识。
了解 Kubernetes 基本原理与使用。